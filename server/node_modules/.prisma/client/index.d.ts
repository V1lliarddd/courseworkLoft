
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Categories
 * 
 */
export type Categories = $Result.DefaultSelection<Prisma.$CategoriesPayload>
/**
 * Model SubCategories
 * 
 */
export type SubCategories = $Result.DefaultSelection<Prisma.$SubCategoriesPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Favourites
 * 
 */
export type Favourites = $Result.DefaultSelection<Prisma.$FavouritesPayload>
/**
 * Model Goods
 * 
 */
export type Goods = $Result.DefaultSelection<Prisma.$GoodsPayload>
/**
 * Model Purchase_story
 * 
 */
export type Purchase_story = $Result.DefaultSelection<Prisma.$Purchase_storyPayload>
/**
 * Model Visit_story
 * 
 */
export type Visit_story = $Result.DefaultSelection<Prisma.$Visit_storyPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categories.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categories.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<ExtArgs>;

  /**
   * `prisma.subCategories`: Exposes CRUD operations for the **SubCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCategories
    * const subCategories = await prisma.subCategories.findMany()
    * ```
    */
  get subCategories(): Prisma.SubCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.favourites`: Exposes CRUD operations for the **Favourites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favourites
    * const favourites = await prisma.favourites.findMany()
    * ```
    */
  get favourites(): Prisma.FavouritesDelegate<ExtArgs>;

  /**
   * `prisma.goods`: Exposes CRUD operations for the **Goods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goods
    * const goods = await prisma.goods.findMany()
    * ```
    */
  get goods(): Prisma.GoodsDelegate<ExtArgs>;

  /**
   * `prisma.purchase_story`: Exposes CRUD operations for the **Purchase_story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchase_stories
    * const purchase_stories = await prisma.purchase_story.findMany()
    * ```
    */
  get purchase_story(): Prisma.Purchase_storyDelegate<ExtArgs>;

  /**
   * `prisma.visit_story`: Exposes CRUD operations for the **Visit_story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visit_stories
    * const visit_stories = await prisma.visit_story.findMany()
    * ```
    */
  get visit_story(): Prisma.Visit_storyDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.0
   * Query Engine version: e90b936d84779543cbe0e494bc8b9d7337fad8e4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Categories: 'Categories',
    SubCategories: 'SubCategories',
    User: 'User',
    Favourites: 'Favourites',
    Goods: 'Goods',
    Purchase_story: 'Purchase_story',
    Visit_story: 'Visit_story',
    Feedback: 'Feedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'categories' | 'subCategories' | 'user' | 'favourites' | 'goods' | 'purchase_story' | 'visit_story' | 'feedback'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Categories: {
        payload: Prisma.$CategoriesPayload<ExtArgs>
        fields: Prisma.CategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findFirst: {
            args: Prisma.CategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findMany: {
            args: Prisma.CategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          create: {
            args: Prisma.CategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          createMany: {
            args: Prisma.CategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          update: {
            args: Prisma.CategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          deleteMany: {
            args: Prisma.CategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.CategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      SubCategories: {
        payload: Prisma.$SubCategoriesPayload<ExtArgs>
        fields: Prisma.SubCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubCategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubCategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          findFirst: {
            args: Prisma.SubCategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubCategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          findMany: {
            args: Prisma.SubCategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>[]
          }
          create: {
            args: Prisma.SubCategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          createMany: {
            args: Prisma.SubCategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubCategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          update: {
            args: Prisma.SubCategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.SubCategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubCategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubCategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubCategoriesPayload>
          }
          aggregate: {
            args: Prisma.SubCategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubCategories>
          }
          groupBy: {
            args: Prisma.SubCategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubCategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<SubCategoriesCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Favourites: {
        payload: Prisma.$FavouritesPayload<ExtArgs>
        fields: Prisma.FavouritesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavouritesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavouritesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          findFirst: {
            args: Prisma.FavouritesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavouritesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          findMany: {
            args: Prisma.FavouritesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>[]
          }
          create: {
            args: Prisma.FavouritesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          createMany: {
            args: Prisma.FavouritesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavouritesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          update: {
            args: Prisma.FavouritesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          deleteMany: {
            args: Prisma.FavouritesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavouritesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavouritesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouritesPayload>
          }
          aggregate: {
            args: Prisma.FavouritesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavourites>
          }
          groupBy: {
            args: Prisma.FavouritesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavouritesGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavouritesCountArgs<ExtArgs>,
            result: $Utils.Optional<FavouritesCountAggregateOutputType> | number
          }
        }
      }
      Goods: {
        payload: Prisma.$GoodsPayload<ExtArgs>
        fields: Prisma.GoodsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoodsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoodsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          findFirst: {
            args: Prisma.GoodsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoodsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          findMany: {
            args: Prisma.GoodsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>[]
          }
          create: {
            args: Prisma.GoodsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          createMany: {
            args: Prisma.GoodsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GoodsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          update: {
            args: Prisma.GoodsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          deleteMany: {
            args: Prisma.GoodsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GoodsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GoodsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoodsPayload>
          }
          aggregate: {
            args: Prisma.GoodsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGoods>
          }
          groupBy: {
            args: Prisma.GoodsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GoodsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoodsCountArgs<ExtArgs>,
            result: $Utils.Optional<GoodsCountAggregateOutputType> | number
          }
        }
      }
      Purchase_story: {
        payload: Prisma.$Purchase_storyPayload<ExtArgs>
        fields: Prisma.Purchase_storyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Purchase_storyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Purchase_storyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          findFirst: {
            args: Prisma.Purchase_storyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Purchase_storyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          findMany: {
            args: Prisma.Purchase_storyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>[]
          }
          create: {
            args: Prisma.Purchase_storyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          createMany: {
            args: Prisma.Purchase_storyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Purchase_storyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          update: {
            args: Prisma.Purchase_storyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          deleteMany: {
            args: Prisma.Purchase_storyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Purchase_storyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Purchase_storyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Purchase_storyPayload>
          }
          aggregate: {
            args: Prisma.Purchase_storyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePurchase_story>
          }
          groupBy: {
            args: Prisma.Purchase_storyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Purchase_storyGroupByOutputType>[]
          }
          count: {
            args: Prisma.Purchase_storyCountArgs<ExtArgs>,
            result: $Utils.Optional<Purchase_storyCountAggregateOutputType> | number
          }
        }
      }
      Visit_story: {
        payload: Prisma.$Visit_storyPayload<ExtArgs>
        fields: Prisma.Visit_storyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Visit_storyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Visit_storyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          findFirst: {
            args: Prisma.Visit_storyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Visit_storyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          findMany: {
            args: Prisma.Visit_storyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>[]
          }
          create: {
            args: Prisma.Visit_storyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          createMany: {
            args: Prisma.Visit_storyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Visit_storyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          update: {
            args: Prisma.Visit_storyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          deleteMany: {
            args: Prisma.Visit_storyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Visit_storyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Visit_storyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Visit_storyPayload>
          }
          aggregate: {
            args: Prisma.Visit_storyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVisit_story>
          }
          groupBy: {
            args: Prisma.Visit_storyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Visit_storyGroupByOutputType>[]
          }
          count: {
            args: Prisma.Visit_storyCountArgs<ExtArgs>,
            result: $Utils.Optional<Visit_storyCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    subcategories: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subcategories?: boolean | CategoriesCountOutputTypeCountSubcategoriesArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountSubcategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SubCategoriesWhereInput
  }



  /**
   * Count Type SubCategoriesCountOutputType
   */

  export type SubCategoriesCountOutputType = {
    Goods: number
  }

  export type SubCategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Goods?: boolean | SubCategoriesCountOutputTypeCountGoodsArgs
  }

  // Custom InputTypes

  /**
   * SubCategoriesCountOutputType without action
   */
  export type SubCategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategoriesCountOutputType
     */
    select?: SubCategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubCategoriesCountOutputType without action
   */
  export type SubCategoriesCountOutputTypeCountGoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GoodsWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Favourites: number
    Purchase_story: number
    Visit_story: number
    Feedback: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Favourites?: boolean | UserCountOutputTypeCountFavouritesArgs
    Purchase_story?: boolean | UserCountOutputTypeCountPurchase_storyArgs
    Visit_story?: boolean | UserCountOutputTypeCountVisit_storyArgs
    Feedback?: boolean | UserCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavouritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavouritesWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPurchase_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Purchase_storyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVisit_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Visit_storyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }



  /**
   * Count Type GoodsCountOutputType
   */

  export type GoodsCountOutputType = {
    Favourites: number
    Purchase_story: number
    Visit_story: number
    Feedback: number
  }

  export type GoodsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Favourites?: boolean | GoodsCountOutputTypeCountFavouritesArgs
    Purchase_story?: boolean | GoodsCountOutputTypeCountPurchase_storyArgs
    Visit_story?: boolean | GoodsCountOutputTypeCountVisit_storyArgs
    Feedback?: boolean | GoodsCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes

  /**
   * GoodsCountOutputType without action
   */
  export type GoodsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoodsCountOutputType
     */
    select?: GoodsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GoodsCountOutputType without action
   */
  export type GoodsCountOutputTypeCountFavouritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavouritesWhereInput
  }


  /**
   * GoodsCountOutputType without action
   */
  export type GoodsCountOutputTypeCountPurchase_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Purchase_storyWhereInput
  }


  /**
   * GoodsCountOutputType without action
   */
  export type GoodsCountOutputTypeCountVisit_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Visit_storyWhereInput
  }


  /**
   * GoodsCountOutputType without action
   */
  export type GoodsCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to aggregate.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CategoriesWhereInput
    orderBy?: CategoriesOrderByWithAggregationInput | CategoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    title: string
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    subcategories?: boolean | Categories$subcategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectScalar = {
    id?: boolean
    title?: boolean
  }

  export type CategoriesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    subcategories?: boolean | Categories$subcategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Categories"
    objects: {
      subcategories: Prisma.$SubCategoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type CategoriesGetPayload<S extends boolean | null | undefined | CategoriesDefaultArgs> = $Result.GetResult<Prisma.$CategoriesPayload, S>

  type CategoriesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CategoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface CategoriesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categories'], meta: { name: 'Categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends CategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesCreateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesDeleteArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpsertArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categories model
   */
  readonly fields: CategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subcategories<T extends Categories$subcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Categories$subcategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categories model
   */ 
  interface CategoriesFieldRefs {
    readonly id: FieldRef<"Categories", 'Int'>
    readonly title: FieldRef<"Categories", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Categories findUnique
   */
  export type CategoriesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findUniqueOrThrow
   */
  export type CategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findFirst
   */
  export type CategoriesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findFirstOrThrow
   */
  export type CategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories create
   */
  export type CategoriesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Categories.
     */
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }


  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoriesCreateManyInput | CategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categories update
   */
  export type CategoriesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Categories.
     */
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Categories to update in case it exists.
     */
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     */
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }


  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter which Categories to delete.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories.subcategories
   */
  export type Categories$subcategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    where?: SubCategoriesWhereInput
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    cursor?: SubCategoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * Categories without action
   */
  export type CategoriesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
  }



  /**
   * Model SubCategories
   */

  export type AggregateSubCategories = {
    _count: SubCategoriesCountAggregateOutputType | null
    _avg: SubCategoriesAvgAggregateOutputType | null
    _sum: SubCategoriesSumAggregateOutputType | null
    _min: SubCategoriesMinAggregateOutputType | null
    _max: SubCategoriesMaxAggregateOutputType | null
  }

  export type SubCategoriesAvgAggregateOutputType = {
    id: number | null
    categoriesId: number | null
  }

  export type SubCategoriesSumAggregateOutputType = {
    id: number | null
    categoriesId: number | null
  }

  export type SubCategoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
    categoriesId: number | null
  }

  export type SubCategoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    categoriesId: number | null
  }

  export type SubCategoriesCountAggregateOutputType = {
    id: number
    title: number
    categoriesId: number
    _all: number
  }


  export type SubCategoriesAvgAggregateInputType = {
    id?: true
    categoriesId?: true
  }

  export type SubCategoriesSumAggregateInputType = {
    id?: true
    categoriesId?: true
  }

  export type SubCategoriesMinAggregateInputType = {
    id?: true
    title?: true
    categoriesId?: true
  }

  export type SubCategoriesMaxAggregateInputType = {
    id?: true
    title?: true
    categoriesId?: true
  }

  export type SubCategoriesCountAggregateInputType = {
    id?: true
    title?: true
    categoriesId?: true
    _all?: true
  }

  export type SubCategoriesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategories to aggregate.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubCategories
    **/
    _count?: true | SubCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCategoriesMaxAggregateInputType
  }

  export type GetSubCategoriesAggregateType<T extends SubCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCategories[P]>
      : GetScalarType<T[P], AggregateSubCategories[P]>
  }




  export type SubCategoriesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SubCategoriesWhereInput
    orderBy?: SubCategoriesOrderByWithAggregationInput | SubCategoriesOrderByWithAggregationInput[]
    by: SubCategoriesScalarFieldEnum[] | SubCategoriesScalarFieldEnum
    having?: SubCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCategoriesCountAggregateInputType | true
    _avg?: SubCategoriesAvgAggregateInputType
    _sum?: SubCategoriesSumAggregateInputType
    _min?: SubCategoriesMinAggregateInputType
    _max?: SubCategoriesMaxAggregateInputType
  }

  export type SubCategoriesGroupByOutputType = {
    id: number
    title: string
    categoriesId: number | null
    _count: SubCategoriesCountAggregateOutputType | null
    _avg: SubCategoriesAvgAggregateOutputType | null
    _sum: SubCategoriesSumAggregateOutputType | null
    _min: SubCategoriesMinAggregateOutputType | null
    _max: SubCategoriesMaxAggregateOutputType | null
  }

  type GetSubCategoriesGroupByPayload<T extends SubCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], SubCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type SubCategoriesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    categoriesId?: boolean
    Categories?: boolean | SubCategories$CategoriesArgs<ExtArgs>
    Goods?: boolean | SubCategories$GoodsArgs<ExtArgs>
    _count?: boolean | SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subCategories"]>

  export type SubCategoriesSelectScalar = {
    id?: boolean
    title?: boolean
    categoriesId?: boolean
  }

  export type SubCategoriesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Categories?: boolean | SubCategories$CategoriesArgs<ExtArgs>
    Goods?: boolean | SubCategories$GoodsArgs<ExtArgs>
    _count?: boolean | SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubCategoriesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SubCategories"
    objects: {
      Categories: Prisma.$CategoriesPayload<ExtArgs> | null
      Goods: Prisma.$GoodsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
      categoriesId: number | null
    }, ExtArgs["result"]["subCategories"]>
    composites: {}
  }


  type SubCategoriesGetPayload<S extends boolean | null | undefined | SubCategoriesDefaultArgs> = $Result.GetResult<Prisma.$SubCategoriesPayload, S>

  type SubCategoriesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SubCategoriesFindManyArgs, 'select' | 'include'> & {
      select?: SubCategoriesCountAggregateInputType | true
    }

  export interface SubCategoriesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubCategories'], meta: { name: 'SubCategories' } }
    /**
     * Find zero or one SubCategories that matches the filter.
     * @param {SubCategoriesFindUniqueArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubCategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubCategories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubCategoriesFindUniqueOrThrowArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubCategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindFirstArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubCategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindFirstOrThrowArgs} args - Arguments to find a SubCategories
     * @example
     * // Get one SubCategories
     * const subCategories = await prisma.subCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubCategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCategories
     * const subCategories = await prisma.subCategories.findMany()
     * 
     * // Get first 10 SubCategories
     * const subCategories = await prisma.subCategories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCategoriesWithIdOnly = await prisma.subCategories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubCategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubCategories.
     * @param {SubCategoriesCreateArgs} args - Arguments to create a SubCategories.
     * @example
     * // Create one SubCategories
     * const SubCategories = await prisma.subCategories.create({
     *   data: {
     *     // ... data to create a SubCategories
     *   }
     * })
     * 
    **/
    create<T extends SubCategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesCreateArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubCategories.
     *     @param {SubCategoriesCreateManyArgs} args - Arguments to create many SubCategories.
     *     @example
     *     // Create many SubCategories
     *     const subCategories = await prisma.subCategories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubCategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubCategories.
     * @param {SubCategoriesDeleteArgs} args - Arguments to delete one SubCategories.
     * @example
     * // Delete one SubCategories
     * const SubCategories = await prisma.subCategories.delete({
     *   where: {
     *     // ... filter to delete one SubCategories
     *   }
     * })
     * 
    **/
    delete<T extends SubCategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesDeleteArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubCategories.
     * @param {SubCategoriesUpdateArgs} args - Arguments to update one SubCategories.
     * @example
     * // Update one SubCategories
     * const subCategories = await prisma.subCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubCategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpdateArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubCategories.
     * @param {SubCategoriesDeleteManyArgs} args - Arguments to filter SubCategories to delete.
     * @example
     * // Delete a few SubCategories
     * const { count } = await prisma.subCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubCategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubCategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCategories
     * const subCategories = await prisma.subCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubCategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCategories.
     * @param {SubCategoriesUpsertArgs} args - Arguments to update or create a SubCategories.
     * @example
     * // Update or create a SubCategories
     * const subCategories = await prisma.subCategories.upsert({
     *   create: {
     *     // ... data to create a SubCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCategories we want to update
     *   }
     * })
    **/
    upsert<T extends SubCategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubCategoriesUpsertArgs<ExtArgs>>
    ): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesCountArgs} args - Arguments to filter SubCategories to count.
     * @example
     * // Count the number of SubCategories
     * const count = await prisma.subCategories.count({
     *   where: {
     *     // ... the filter for the SubCategories we want to count
     *   }
     * })
    **/
    count<T extends SubCategoriesCountArgs>(
      args?: Subset<T, SubCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCategoriesAggregateArgs>(args: Subset<T, SubCategoriesAggregateArgs>): Prisma.PrismaPromise<GetSubCategoriesAggregateType<T>>

    /**
     * Group by SubCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: SubCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubCategories model
   */
  readonly fields: SubCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubCategoriesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Categories<T extends SubCategories$CategoriesArgs<ExtArgs> = {}>(args?: Subset<T, SubCategories$CategoriesArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Goods<T extends SubCategories$GoodsArgs<ExtArgs> = {}>(args?: Subset<T, SubCategories$GoodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubCategories model
   */ 
  interface SubCategoriesFieldRefs {
    readonly id: FieldRef<"SubCategories", 'Int'>
    readonly title: FieldRef<"SubCategories", 'String'>
    readonly categoriesId: FieldRef<"SubCategories", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SubCategories findUnique
   */
  export type SubCategoriesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories findUniqueOrThrow
   */
  export type SubCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories findFirst
   */
  export type SubCategoriesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategories.
     */
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories findFirstOrThrow
   */
  export type SubCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubCategories.
     */
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories findMany
   */
  export type SubCategoriesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SubCategories to fetch.
     */
    where?: SubCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubCategories to fetch.
     */
    orderBy?: SubCategoriesOrderByWithRelationInput | SubCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubCategories.
     */
    cursor?: SubCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubCategories.
     */
    skip?: number
    distinct?: SubCategoriesScalarFieldEnum | SubCategoriesScalarFieldEnum[]
  }


  /**
   * SubCategories create
   */
  export type SubCategoriesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a SubCategories.
     */
    data: XOR<SubCategoriesCreateInput, SubCategoriesUncheckedCreateInput>
  }


  /**
   * SubCategories createMany
   */
  export type SubCategoriesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubCategories.
     */
    data: SubCategoriesCreateManyInput | SubCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubCategories update
   */
  export type SubCategoriesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a SubCategories.
     */
    data: XOR<SubCategoriesUpdateInput, SubCategoriesUncheckedUpdateInput>
    /**
     * Choose, which SubCategories to update.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories updateMany
   */
  export type SubCategoriesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubCategories.
     */
    data: XOR<SubCategoriesUpdateManyMutationInput, SubCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which SubCategories to update
     */
    where?: SubCategoriesWhereInput
  }


  /**
   * SubCategories upsert
   */
  export type SubCategoriesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the SubCategories to update in case it exists.
     */
    where: SubCategoriesWhereUniqueInput
    /**
     * In case the SubCategories found by the `where` argument doesn't exist, create a new SubCategories with this data.
     */
    create: XOR<SubCategoriesCreateInput, SubCategoriesUncheckedCreateInput>
    /**
     * In case the SubCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubCategoriesUpdateInput, SubCategoriesUncheckedUpdateInput>
  }


  /**
   * SubCategories delete
   */
  export type SubCategoriesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    /**
     * Filter which SubCategories to delete.
     */
    where: SubCategoriesWhereUniqueInput
  }


  /**
   * SubCategories deleteMany
   */
  export type SubCategoriesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubCategories to delete
     */
    where?: SubCategoriesWhereInput
  }


  /**
   * SubCategories.Categories
   */
  export type SubCategories$CategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    where?: CategoriesWhereInput
  }


  /**
   * SubCategories.Goods
   */
  export type SubCategories$GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    where?: GoodsWhereInput
    orderBy?: GoodsOrderByWithRelationInput | GoodsOrderByWithRelationInput[]
    cursor?: GoodsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoodsScalarFieldEnum | GoodsScalarFieldEnum[]
  }


  /**
   * SubCategories without action
   */
  export type SubCategoriesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    login: string | null
    password: string | null
    name: string | null
    phone_number: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    login: string | null
    password: string | null
    name: string | null
    phone_number: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    password: number
    name: number
    phone_number: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    password?: true
    name?: true
    phone_number?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    password?: true
    name?: true
    phone_number?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    password?: true
    name?: true
    phone_number?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    login: string
    password: string
    name: string
    phone_number: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    login?: boolean
    password?: boolean
    name?: boolean
    phone_number?: boolean
    Favourites?: boolean | User$FavouritesArgs<ExtArgs>
    Purchase_story?: boolean | User$Purchase_storyArgs<ExtArgs>
    Visit_story?: boolean | User$Visit_storyArgs<ExtArgs>
    Feedback?: boolean | User$FeedbackArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    login?: boolean
    password?: boolean
    name?: boolean
    phone_number?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Favourites?: boolean | User$FavouritesArgs<ExtArgs>
    Purchase_story?: boolean | User$Purchase_storyArgs<ExtArgs>
    Visit_story?: boolean | User$Visit_storyArgs<ExtArgs>
    Feedback?: boolean | User$FeedbackArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Favourites: Prisma.$FavouritesPayload<ExtArgs>[]
      Purchase_story: Prisma.$Purchase_storyPayload<ExtArgs>[]
      Visit_story: Prisma.$Visit_storyPayload<ExtArgs>[]
      Feedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      login: string
      password: string
      name: string
      phone_number: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Favourites<T extends User$FavouritesArgs<ExtArgs> = {}>(args?: Subset<T, User$FavouritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Purchase_story<T extends User$Purchase_storyArgs<ExtArgs> = {}>(args?: Subset<T, User$Purchase_storyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Visit_story<T extends User$Visit_storyArgs<ExtArgs> = {}>(args?: Subset<T, User$Visit_storyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Feedback<T extends User$FeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$FeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly login: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phone_number: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Favourites
   */
  export type User$FavouritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    where?: FavouritesWhereInput
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    cursor?: FavouritesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouritesScalarFieldEnum | FavouritesScalarFieldEnum[]
  }


  /**
   * User.Purchase_story
   */
  export type User$Purchase_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    where?: Purchase_storyWhereInput
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    cursor?: Purchase_storyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Purchase_storyScalarFieldEnum | Purchase_storyScalarFieldEnum[]
  }


  /**
   * User.Visit_story
   */
  export type User$Visit_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    where?: Visit_storyWhereInput
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    cursor?: Visit_storyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Visit_storyScalarFieldEnum | Visit_storyScalarFieldEnum[]
  }


  /**
   * User.Feedback
   */
  export type User$FeedbackArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Favourites
   */

  export type AggregateFavourites = {
    _count: FavouritesCountAggregateOutputType | null
    _avg: FavouritesAvgAggregateOutputType | null
    _sum: FavouritesSumAggregateOutputType | null
    _min: FavouritesMinAggregateOutputType | null
    _max: FavouritesMaxAggregateOutputType | null
  }

  export type FavouritesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    good_id: number | null
  }

  export type FavouritesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    good_id: number | null
  }

  export type FavouritesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    good_id: number | null
  }

  export type FavouritesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    good_id: number | null
  }

  export type FavouritesCountAggregateOutputType = {
    id: number
    userId: number
    good_id: number
    _all: number
  }


  export type FavouritesAvgAggregateInputType = {
    id?: true
    userId?: true
    good_id?: true
  }

  export type FavouritesSumAggregateInputType = {
    id?: true
    userId?: true
    good_id?: true
  }

  export type FavouritesMinAggregateInputType = {
    id?: true
    userId?: true
    good_id?: true
  }

  export type FavouritesMaxAggregateInputType = {
    id?: true
    userId?: true
    good_id?: true
  }

  export type FavouritesCountAggregateInputType = {
    id?: true
    userId?: true
    good_id?: true
    _all?: true
  }

  export type FavouritesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favourites to aggregate.
     */
    where?: FavouritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavouritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favourites
    **/
    _count?: true | FavouritesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavouritesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavouritesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavouritesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavouritesMaxAggregateInputType
  }

  export type GetFavouritesAggregateType<T extends FavouritesAggregateArgs> = {
        [P in keyof T & keyof AggregateFavourites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavourites[P]>
      : GetScalarType<T[P], AggregateFavourites[P]>
  }




  export type FavouritesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavouritesWhereInput
    orderBy?: FavouritesOrderByWithAggregationInput | FavouritesOrderByWithAggregationInput[]
    by: FavouritesScalarFieldEnum[] | FavouritesScalarFieldEnum
    having?: FavouritesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavouritesCountAggregateInputType | true
    _avg?: FavouritesAvgAggregateInputType
    _sum?: FavouritesSumAggregateInputType
    _min?: FavouritesMinAggregateInputType
    _max?: FavouritesMaxAggregateInputType
  }

  export type FavouritesGroupByOutputType = {
    id: number
    userId: number | null
    good_id: number
    _count: FavouritesCountAggregateOutputType | null
    _avg: FavouritesAvgAggregateOutputType | null
    _sum: FavouritesSumAggregateOutputType | null
    _min: FavouritesMinAggregateOutputType | null
    _max: FavouritesMaxAggregateOutputType | null
  }

  type GetFavouritesGroupByPayload<T extends FavouritesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavouritesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavouritesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavouritesGroupByOutputType[P]>
            : GetScalarType<T[P], FavouritesGroupByOutputType[P]>
        }
      >
    >


  export type FavouritesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    good_id?: boolean
    User?: boolean | Favourites$UserArgs<ExtArgs>
    Goods?: boolean | Favourites$GoodsArgs<ExtArgs>
  }, ExtArgs["result"]["favourites"]>

  export type FavouritesSelectScalar = {
    id?: boolean
    userId?: boolean
    good_id?: boolean
  }

  export type FavouritesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | Favourites$UserArgs<ExtArgs>
    Goods?: boolean | Favourites$GoodsArgs<ExtArgs>
  }


  export type $FavouritesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Favourites"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
      Goods: Prisma.$GoodsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      userId: number | null
      good_id: number
    }, ExtArgs["result"]["favourites"]>
    composites: {}
  }


  type FavouritesGetPayload<S extends boolean | null | undefined | FavouritesDefaultArgs> = $Result.GetResult<Prisma.$FavouritesPayload, S>

  type FavouritesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FavouritesFindManyArgs, 'select' | 'include'> & {
      select?: FavouritesCountAggregateInputType | true
    }

  export interface FavouritesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favourites'], meta: { name: 'Favourites' } }
    /**
     * Find zero or one Favourites that matches the filter.
     * @param {FavouritesFindUniqueArgs} args - Arguments to find a Favourites
     * @example
     * // Get one Favourites
     * const favourites = await prisma.favourites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavouritesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesFindUniqueArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Favourites that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavouritesFindUniqueOrThrowArgs} args - Arguments to find a Favourites
     * @example
     * // Get one Favourites
     * const favourites = await prisma.favourites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavouritesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Favourites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesFindFirstArgs} args - Arguments to find a Favourites
     * @example
     * // Get one Favourites
     * const favourites = await prisma.favourites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavouritesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesFindFirstArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Favourites that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesFindFirstOrThrowArgs} args - Arguments to find a Favourites
     * @example
     * // Get one Favourites
     * const favourites = await prisma.favourites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavouritesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Favourites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favourites
     * const favourites = await prisma.favourites.findMany()
     * 
     * // Get first 10 Favourites
     * const favourites = await prisma.favourites.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favouritesWithIdOnly = await prisma.favourites.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FavouritesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Favourites.
     * @param {FavouritesCreateArgs} args - Arguments to create a Favourites.
     * @example
     * // Create one Favourites
     * const Favourites = await prisma.favourites.create({
     *   data: {
     *     // ... data to create a Favourites
     *   }
     * })
     * 
    **/
    create<T extends FavouritesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesCreateArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Favourites.
     *     @param {FavouritesCreateManyArgs} args - Arguments to create many Favourites.
     *     @example
     *     // Create many Favourites
     *     const favourites = await prisma.favourites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavouritesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Favourites.
     * @param {FavouritesDeleteArgs} args - Arguments to delete one Favourites.
     * @example
     * // Delete one Favourites
     * const Favourites = await prisma.favourites.delete({
     *   where: {
     *     // ... filter to delete one Favourites
     *   }
     * })
     * 
    **/
    delete<T extends FavouritesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesDeleteArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Favourites.
     * @param {FavouritesUpdateArgs} args - Arguments to update one Favourites.
     * @example
     * // Update one Favourites
     * const favourites = await prisma.favourites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavouritesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesUpdateArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Favourites.
     * @param {FavouritesDeleteManyArgs} args - Arguments to filter Favourites to delete.
     * @example
     * // Delete a few Favourites
     * const { count } = await prisma.favourites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavouritesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouritesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favourites
     * const favourites = await prisma.favourites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavouritesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favourites.
     * @param {FavouritesUpsertArgs} args - Arguments to update or create a Favourites.
     * @example
     * // Update or create a Favourites
     * const favourites = await prisma.favourites.upsert({
     *   create: {
     *     // ... data to create a Favourites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favourites we want to update
     *   }
     * })
    **/
    upsert<T extends FavouritesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavouritesUpsertArgs<ExtArgs>>
    ): Prisma__FavouritesClient<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesCountArgs} args - Arguments to filter Favourites to count.
     * @example
     * // Count the number of Favourites
     * const count = await prisma.favourites.count({
     *   where: {
     *     // ... the filter for the Favourites we want to count
     *   }
     * })
    **/
    count<T extends FavouritesCountArgs>(
      args?: Subset<T, FavouritesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavouritesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavouritesAggregateArgs>(args: Subset<T, FavouritesAggregateArgs>): Prisma.PrismaPromise<GetFavouritesAggregateType<T>>

    /**
     * Group by Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouritesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavouritesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavouritesGroupByArgs['orderBy'] }
        : { orderBy?: FavouritesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavouritesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavouritesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favourites model
   */
  readonly fields: FavouritesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favourites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavouritesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends Favourites$UserArgs<ExtArgs> = {}>(args?: Subset<T, Favourites$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Goods<T extends Favourites$GoodsArgs<ExtArgs> = {}>(args?: Subset<T, Favourites$GoodsArgs<ExtArgs>>): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Favourites model
   */ 
  interface FavouritesFieldRefs {
    readonly id: FieldRef<"Favourites", 'Int'>
    readonly userId: FieldRef<"Favourites", 'Int'>
    readonly good_id: FieldRef<"Favourites", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Favourites findUnique
   */
  export type FavouritesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter, which Favourites to fetch.
     */
    where: FavouritesWhereUniqueInput
  }


  /**
   * Favourites findUniqueOrThrow
   */
  export type FavouritesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter, which Favourites to fetch.
     */
    where: FavouritesWhereUniqueInput
  }


  /**
   * Favourites findFirst
   */
  export type FavouritesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter, which Favourites to fetch.
     */
    where?: FavouritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favourites.
     */
    cursor?: FavouritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favourites.
     */
    distinct?: FavouritesScalarFieldEnum | FavouritesScalarFieldEnum[]
  }


  /**
   * Favourites findFirstOrThrow
   */
  export type FavouritesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter, which Favourites to fetch.
     */
    where?: FavouritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favourites.
     */
    cursor?: FavouritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favourites.
     */
    distinct?: FavouritesScalarFieldEnum | FavouritesScalarFieldEnum[]
  }


  /**
   * Favourites findMany
   */
  export type FavouritesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter, which Favourites to fetch.
     */
    where?: FavouritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favourites.
     */
    cursor?: FavouritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    distinct?: FavouritesScalarFieldEnum | FavouritesScalarFieldEnum[]
  }


  /**
   * Favourites create
   */
  export type FavouritesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * The data needed to create a Favourites.
     */
    data: XOR<FavouritesCreateInput, FavouritesUncheckedCreateInput>
  }


  /**
   * Favourites createMany
   */
  export type FavouritesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favourites.
     */
    data: FavouritesCreateManyInput | FavouritesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Favourites update
   */
  export type FavouritesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * The data needed to update a Favourites.
     */
    data: XOR<FavouritesUpdateInput, FavouritesUncheckedUpdateInput>
    /**
     * Choose, which Favourites to update.
     */
    where: FavouritesWhereUniqueInput
  }


  /**
   * Favourites updateMany
   */
  export type FavouritesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favourites.
     */
    data: XOR<FavouritesUpdateManyMutationInput, FavouritesUncheckedUpdateManyInput>
    /**
     * Filter which Favourites to update
     */
    where?: FavouritesWhereInput
  }


  /**
   * Favourites upsert
   */
  export type FavouritesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * The filter to search for the Favourites to update in case it exists.
     */
    where: FavouritesWhereUniqueInput
    /**
     * In case the Favourites found by the `where` argument doesn't exist, create a new Favourites with this data.
     */
    create: XOR<FavouritesCreateInput, FavouritesUncheckedCreateInput>
    /**
     * In case the Favourites was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavouritesUpdateInput, FavouritesUncheckedUpdateInput>
  }


  /**
   * Favourites delete
   */
  export type FavouritesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    /**
     * Filter which Favourites to delete.
     */
    where: FavouritesWhereUniqueInput
  }


  /**
   * Favourites deleteMany
   */
  export type FavouritesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favourites to delete
     */
    where?: FavouritesWhereInput
  }


  /**
   * Favourites.User
   */
  export type Favourites$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Favourites.Goods
   */
  export type Favourites$GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    where?: GoodsWhereInput
  }


  /**
   * Favourites without action
   */
  export type FavouritesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
  }



  /**
   * Model Goods
   */

  export type AggregateGoods = {
    _count: GoodsCountAggregateOutputType | null
    _avg: GoodsAvgAggregateOutputType | null
    _sum: GoodsSumAggregateOutputType | null
    _min: GoodsMinAggregateOutputType | null
    _max: GoodsMaxAggregateOutputType | null
  }

  export type GoodsAvgAggregateOutputType = {
    id: number | null
    subcategory_id: number | null
    price: number | null
    width: number | null
    height: number | null
    length: number | null
  }

  export type GoodsSumAggregateOutputType = {
    id: number | null
    subcategory_id: number | null
    price: number | null
    width: number | null
    height: number | null
    length: number | null
  }

  export type GoodsMinAggregateOutputType = {
    id: number | null
    subcategory_id: number | null
    title: string | null
    price: number | null
    width: number | null
    height: number | null
    length: number | null
    color: string | null
    manufacter: string | null
  }

  export type GoodsMaxAggregateOutputType = {
    id: number | null
    subcategory_id: number | null
    title: string | null
    price: number | null
    width: number | null
    height: number | null
    length: number | null
    color: string | null
    manufacter: string | null
  }

  export type GoodsCountAggregateOutputType = {
    id: number
    subcategory_id: number
    title: number
    price: number
    width: number
    height: number
    length: number
    color: number
    manufacter: number
    _all: number
  }


  export type GoodsAvgAggregateInputType = {
    id?: true
    subcategory_id?: true
    price?: true
    width?: true
    height?: true
    length?: true
  }

  export type GoodsSumAggregateInputType = {
    id?: true
    subcategory_id?: true
    price?: true
    width?: true
    height?: true
    length?: true
  }

  export type GoodsMinAggregateInputType = {
    id?: true
    subcategory_id?: true
    title?: true
    price?: true
    width?: true
    height?: true
    length?: true
    color?: true
    manufacter?: true
  }

  export type GoodsMaxAggregateInputType = {
    id?: true
    subcategory_id?: true
    title?: true
    price?: true
    width?: true
    height?: true
    length?: true
    color?: true
    manufacter?: true
  }

  export type GoodsCountAggregateInputType = {
    id?: true
    subcategory_id?: true
    title?: true
    price?: true
    width?: true
    height?: true
    length?: true
    color?: true
    manufacter?: true
    _all?: true
  }

  export type GoodsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goods to aggregate.
     */
    where?: GoodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodsOrderByWithRelationInput | GoodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goods
    **/
    _count?: true | GoodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoodsMaxAggregateInputType
  }

  export type GetGoodsAggregateType<T extends GoodsAggregateArgs> = {
        [P in keyof T & keyof AggregateGoods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoods[P]>
      : GetScalarType<T[P], AggregateGoods[P]>
  }




  export type GoodsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GoodsWhereInput
    orderBy?: GoodsOrderByWithAggregationInput | GoodsOrderByWithAggregationInput[]
    by: GoodsScalarFieldEnum[] | GoodsScalarFieldEnum
    having?: GoodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoodsCountAggregateInputType | true
    _avg?: GoodsAvgAggregateInputType
    _sum?: GoodsSumAggregateInputType
    _min?: GoodsMinAggregateInputType
    _max?: GoodsMaxAggregateInputType
  }

  export type GoodsGroupByOutputType = {
    id: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    _count: GoodsCountAggregateOutputType | null
    _avg: GoodsAvgAggregateOutputType | null
    _sum: GoodsSumAggregateOutputType | null
    _min: GoodsMinAggregateOutputType | null
    _max: GoodsMaxAggregateOutputType | null
  }

  type GetGoodsGroupByPayload<T extends GoodsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoodsGroupByOutputType[P]>
            : GetScalarType<T[P], GoodsGroupByOutputType[P]>
        }
      >
    >


  export type GoodsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subcategory_id?: boolean
    title?: boolean
    price?: boolean
    width?: boolean
    height?: boolean
    length?: boolean
    color?: boolean
    manufacter?: boolean
    Subcategories?: boolean | Goods$SubcategoriesArgs<ExtArgs>
    Favourites?: boolean | Goods$FavouritesArgs<ExtArgs>
    Purchase_story?: boolean | Goods$Purchase_storyArgs<ExtArgs>
    Visit_story?: boolean | Goods$Visit_storyArgs<ExtArgs>
    Feedback?: boolean | Goods$FeedbackArgs<ExtArgs>
    _count?: boolean | GoodsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goods"]>

  export type GoodsSelectScalar = {
    id?: boolean
    subcategory_id?: boolean
    title?: boolean
    price?: boolean
    width?: boolean
    height?: boolean
    length?: boolean
    color?: boolean
    manufacter?: boolean
  }

  export type GoodsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Subcategories?: boolean | Goods$SubcategoriesArgs<ExtArgs>
    Favourites?: boolean | Goods$FavouritesArgs<ExtArgs>
    Purchase_story?: boolean | Goods$Purchase_storyArgs<ExtArgs>
    Visit_story?: boolean | Goods$Visit_storyArgs<ExtArgs>
    Feedback?: boolean | Goods$FeedbackArgs<ExtArgs>
    _count?: boolean | GoodsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GoodsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Goods"
    objects: {
      Subcategories: Prisma.$SubCategoriesPayload<ExtArgs> | null
      Favourites: Prisma.$FavouritesPayload<ExtArgs>[]
      Purchase_story: Prisma.$Purchase_storyPayload<ExtArgs>[]
      Visit_story: Prisma.$Visit_storyPayload<ExtArgs>[]
      Feedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      subcategory_id: number
      title: string
      price: number
      width: number
      height: number
      length: number
      color: string
      manufacter: string
    }, ExtArgs["result"]["goods"]>
    composites: {}
  }


  type GoodsGetPayload<S extends boolean | null | undefined | GoodsDefaultArgs> = $Result.GetResult<Prisma.$GoodsPayload, S>

  type GoodsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GoodsFindManyArgs, 'select' | 'include'> & {
      select?: GoodsCountAggregateInputType | true
    }

  export interface GoodsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goods'], meta: { name: 'Goods' } }
    /**
     * Find zero or one Goods that matches the filter.
     * @param {GoodsFindUniqueArgs} args - Arguments to find a Goods
     * @example
     * // Get one Goods
     * const goods = await prisma.goods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoodsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsFindUniqueArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Goods that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GoodsFindUniqueOrThrowArgs} args - Arguments to find a Goods
     * @example
     * // Get one Goods
     * const goods = await prisma.goods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoodsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Goods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsFindFirstArgs} args - Arguments to find a Goods
     * @example
     * // Get one Goods
     * const goods = await prisma.goods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoodsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsFindFirstArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Goods that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsFindFirstOrThrowArgs} args - Arguments to find a Goods
     * @example
     * // Get one Goods
     * const goods = await prisma.goods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoodsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Goods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goods
     * const goods = await prisma.goods.findMany()
     * 
     * // Get first 10 Goods
     * const goods = await prisma.goods.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goodsWithIdOnly = await prisma.goods.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoodsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Goods.
     * @param {GoodsCreateArgs} args - Arguments to create a Goods.
     * @example
     * // Create one Goods
     * const Goods = await prisma.goods.create({
     *   data: {
     *     // ... data to create a Goods
     *   }
     * })
     * 
    **/
    create<T extends GoodsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsCreateArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Goods.
     *     @param {GoodsCreateManyArgs} args - Arguments to create many Goods.
     *     @example
     *     // Create many Goods
     *     const goods = await prisma.goods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoodsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Goods.
     * @param {GoodsDeleteArgs} args - Arguments to delete one Goods.
     * @example
     * // Delete one Goods
     * const Goods = await prisma.goods.delete({
     *   where: {
     *     // ... filter to delete one Goods
     *   }
     * })
     * 
    **/
    delete<T extends GoodsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsDeleteArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Goods.
     * @param {GoodsUpdateArgs} args - Arguments to update one Goods.
     * @example
     * // Update one Goods
     * const goods = await prisma.goods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoodsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsUpdateArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Goods.
     * @param {GoodsDeleteManyArgs} args - Arguments to filter Goods to delete.
     * @example
     * // Delete a few Goods
     * const { count } = await prisma.goods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoodsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoodsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goods
     * const goods = await prisma.goods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoodsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goods.
     * @param {GoodsUpsertArgs} args - Arguments to update or create a Goods.
     * @example
     * // Update or create a Goods
     * const goods = await prisma.goods.upsert({
     *   create: {
     *     // ... data to create a Goods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goods we want to update
     *   }
     * })
    **/
    upsert<T extends GoodsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GoodsUpsertArgs<ExtArgs>>
    ): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsCountArgs} args - Arguments to filter Goods to count.
     * @example
     * // Count the number of Goods
     * const count = await prisma.goods.count({
     *   where: {
     *     // ... the filter for the Goods we want to count
     *   }
     * })
    **/
    count<T extends GoodsCountArgs>(
      args?: Subset<T, GoodsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoodsAggregateArgs>(args: Subset<T, GoodsAggregateArgs>): Prisma.PrismaPromise<GetGoodsAggregateType<T>>

    /**
     * Group by Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoodsGroupByArgs['orderBy'] }
        : { orderBy?: GoodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoodsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goods model
   */
  readonly fields: GoodsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoodsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Subcategories<T extends Goods$SubcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Goods$SubcategoriesArgs<ExtArgs>>): Prisma__SubCategoriesClient<$Result.GetResult<Prisma.$SubCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Favourites<T extends Goods$FavouritesArgs<ExtArgs> = {}>(args?: Subset<T, Goods$FavouritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouritesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Purchase_story<T extends Goods$Purchase_storyArgs<ExtArgs> = {}>(args?: Subset<T, Goods$Purchase_storyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Visit_story<T extends Goods$Visit_storyArgs<ExtArgs> = {}>(args?: Subset<T, Goods$Visit_storyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Feedback<T extends Goods$FeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Goods$FeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Goods model
   */ 
  interface GoodsFieldRefs {
    readonly id: FieldRef<"Goods", 'Int'>
    readonly subcategory_id: FieldRef<"Goods", 'Int'>
    readonly title: FieldRef<"Goods", 'String'>
    readonly price: FieldRef<"Goods", 'Int'>
    readonly width: FieldRef<"Goods", 'Float'>
    readonly height: FieldRef<"Goods", 'Float'>
    readonly length: FieldRef<"Goods", 'Float'>
    readonly color: FieldRef<"Goods", 'String'>
    readonly manufacter: FieldRef<"Goods", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Goods findUnique
   */
  export type GoodsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where: GoodsWhereUniqueInput
  }


  /**
   * Goods findUniqueOrThrow
   */
  export type GoodsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where: GoodsWhereUniqueInput
  }


  /**
   * Goods findFirst
   */
  export type GoodsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where?: GoodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodsOrderByWithRelationInput | GoodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodsScalarFieldEnum | GoodsScalarFieldEnum[]
  }


  /**
   * Goods findFirstOrThrow
   */
  export type GoodsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where?: GoodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodsOrderByWithRelationInput | GoodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodsScalarFieldEnum | GoodsScalarFieldEnum[]
  }


  /**
   * Goods findMany
   */
  export type GoodsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where?: GoodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodsOrderByWithRelationInput | GoodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goods.
     */
    cursor?: GoodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    distinct?: GoodsScalarFieldEnum | GoodsScalarFieldEnum[]
  }


  /**
   * Goods create
   */
  export type GoodsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * The data needed to create a Goods.
     */
    data: XOR<GoodsCreateInput, GoodsUncheckedCreateInput>
  }


  /**
   * Goods createMany
   */
  export type GoodsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goods.
     */
    data: GoodsCreateManyInput | GoodsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Goods update
   */
  export type GoodsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * The data needed to update a Goods.
     */
    data: XOR<GoodsUpdateInput, GoodsUncheckedUpdateInput>
    /**
     * Choose, which Goods to update.
     */
    where: GoodsWhereUniqueInput
  }


  /**
   * Goods updateMany
   */
  export type GoodsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goods.
     */
    data: XOR<GoodsUpdateManyMutationInput, GoodsUncheckedUpdateManyInput>
    /**
     * Filter which Goods to update
     */
    where?: GoodsWhereInput
  }


  /**
   * Goods upsert
   */
  export type GoodsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * The filter to search for the Goods to update in case it exists.
     */
    where: GoodsWhereUniqueInput
    /**
     * In case the Goods found by the `where` argument doesn't exist, create a new Goods with this data.
     */
    create: XOR<GoodsCreateInput, GoodsUncheckedCreateInput>
    /**
     * In case the Goods was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoodsUpdateInput, GoodsUncheckedUpdateInput>
  }


  /**
   * Goods delete
   */
  export type GoodsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    /**
     * Filter which Goods to delete.
     */
    where: GoodsWhereUniqueInput
  }


  /**
   * Goods deleteMany
   */
  export type GoodsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goods to delete
     */
    where?: GoodsWhereInput
  }


  /**
   * Goods.Subcategories
   */
  export type Goods$SubcategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubCategories
     */
    select?: SubCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCategoriesInclude<ExtArgs> | null
    where?: SubCategoriesWhereInput
  }


  /**
   * Goods.Favourites
   */
  export type Goods$FavouritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favourites
     */
    select?: FavouritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouritesInclude<ExtArgs> | null
    where?: FavouritesWhereInput
    orderBy?: FavouritesOrderByWithRelationInput | FavouritesOrderByWithRelationInput[]
    cursor?: FavouritesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouritesScalarFieldEnum | FavouritesScalarFieldEnum[]
  }


  /**
   * Goods.Purchase_story
   */
  export type Goods$Purchase_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    where?: Purchase_storyWhereInput
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    cursor?: Purchase_storyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Purchase_storyScalarFieldEnum | Purchase_storyScalarFieldEnum[]
  }


  /**
   * Goods.Visit_story
   */
  export type Goods$Visit_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    where?: Visit_storyWhereInput
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    cursor?: Visit_storyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Visit_storyScalarFieldEnum | Visit_storyScalarFieldEnum[]
  }


  /**
   * Goods.Feedback
   */
  export type Goods$FeedbackArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Goods without action
   */
  export type GoodsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
  }



  /**
   * Model Purchase_story
   */

  export type AggregatePurchase_story = {
    _count: Purchase_storyCountAggregateOutputType | null
    _avg: Purchase_storyAvgAggregateOutputType | null
    _sum: Purchase_storySumAggregateOutputType | null
    _min: Purchase_storyMinAggregateOutputType | null
    _max: Purchase_storyMaxAggregateOutputType | null
  }

  export type Purchase_storyAvgAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Purchase_storySumAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Purchase_storyMinAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Purchase_storyMaxAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Purchase_storyCountAggregateOutputType = {
    id: number
    good_id: number
    user_id: number
    quantity: number
    price: number
    _all: number
  }


  export type Purchase_storyAvgAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    quantity?: true
    price?: true
  }

  export type Purchase_storySumAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    quantity?: true
    price?: true
  }

  export type Purchase_storyMinAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    quantity?: true
    price?: true
  }

  export type Purchase_storyMaxAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    quantity?: true
    price?: true
  }

  export type Purchase_storyCountAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    quantity?: true
    price?: true
    _all?: true
  }

  export type Purchase_storyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchase_story to aggregate.
     */
    where?: Purchase_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchase_stories to fetch.
     */
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Purchase_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchase_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchase_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchase_stories
    **/
    _count?: true | Purchase_storyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Purchase_storyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Purchase_storySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Purchase_storyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Purchase_storyMaxAggregateInputType
  }

  export type GetPurchase_storyAggregateType<T extends Purchase_storyAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase_story]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase_story[P]>
      : GetScalarType<T[P], AggregatePurchase_story[P]>
  }




  export type Purchase_storyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Purchase_storyWhereInput
    orderBy?: Purchase_storyOrderByWithAggregationInput | Purchase_storyOrderByWithAggregationInput[]
    by: Purchase_storyScalarFieldEnum[] | Purchase_storyScalarFieldEnum
    having?: Purchase_storyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Purchase_storyCountAggregateInputType | true
    _avg?: Purchase_storyAvgAggregateInputType
    _sum?: Purchase_storySumAggregateInputType
    _min?: Purchase_storyMinAggregateInputType
    _max?: Purchase_storyMaxAggregateInputType
  }

  export type Purchase_storyGroupByOutputType = {
    id: number
    good_id: number
    user_id: number
    quantity: number
    price: number
    _count: Purchase_storyCountAggregateOutputType | null
    _avg: Purchase_storyAvgAggregateOutputType | null
    _sum: Purchase_storySumAggregateOutputType | null
    _min: Purchase_storyMinAggregateOutputType | null
    _max: Purchase_storyMaxAggregateOutputType | null
  }

  type GetPurchase_storyGroupByPayload<T extends Purchase_storyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Purchase_storyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Purchase_storyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Purchase_storyGroupByOutputType[P]>
            : GetScalarType<T[P], Purchase_storyGroupByOutputType[P]>
        }
      >
    >


  export type Purchase_storySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    good_id?: boolean
    user_id?: boolean
    quantity?: boolean
    price?: boolean
    Goods?: boolean | Purchase_story$GoodsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase_story"]>

  export type Purchase_storySelectScalar = {
    id?: boolean
    good_id?: boolean
    user_id?: boolean
    quantity?: boolean
    price?: boolean
  }

  export type Purchase_storyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Goods?: boolean | Purchase_story$GoodsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $Purchase_storyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Purchase_story"
    objects: {
      Goods: Prisma.$GoodsPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      good_id: number
      user_id: number
      quantity: number
      price: number
    }, ExtArgs["result"]["purchase_story"]>
    composites: {}
  }


  type Purchase_storyGetPayload<S extends boolean | null | undefined | Purchase_storyDefaultArgs> = $Result.GetResult<Prisma.$Purchase_storyPayload, S>

  type Purchase_storyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Purchase_storyFindManyArgs, 'select' | 'include'> & {
      select?: Purchase_storyCountAggregateInputType | true
    }

  export interface Purchase_storyDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Purchase_story'], meta: { name: 'Purchase_story' } }
    /**
     * Find zero or one Purchase_story that matches the filter.
     * @param {Purchase_storyFindUniqueArgs} args - Arguments to find a Purchase_story
     * @example
     * // Get one Purchase_story
     * const purchase_story = await prisma.purchase_story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Purchase_storyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyFindUniqueArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Purchase_story that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Purchase_storyFindUniqueOrThrowArgs} args - Arguments to find a Purchase_story
     * @example
     * // Get one Purchase_story
     * const purchase_story = await prisma.purchase_story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Purchase_storyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Purchase_story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyFindFirstArgs} args - Arguments to find a Purchase_story
     * @example
     * // Get one Purchase_story
     * const purchase_story = await prisma.purchase_story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Purchase_storyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyFindFirstArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Purchase_story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyFindFirstOrThrowArgs} args - Arguments to find a Purchase_story
     * @example
     * // Get one Purchase_story
     * const purchase_story = await prisma.purchase_story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Purchase_storyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Purchase_stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchase_stories
     * const purchase_stories = await prisma.purchase_story.findMany()
     * 
     * // Get first 10 Purchase_stories
     * const purchase_stories = await prisma.purchase_story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchase_storyWithIdOnly = await prisma.purchase_story.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Purchase_storyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Purchase_story.
     * @param {Purchase_storyCreateArgs} args - Arguments to create a Purchase_story.
     * @example
     * // Create one Purchase_story
     * const Purchase_story = await prisma.purchase_story.create({
     *   data: {
     *     // ... data to create a Purchase_story
     *   }
     * })
     * 
    **/
    create<T extends Purchase_storyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyCreateArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Purchase_stories.
     *     @param {Purchase_storyCreateManyArgs} args - Arguments to create many Purchase_stories.
     *     @example
     *     // Create many Purchase_stories
     *     const purchase_story = await prisma.purchase_story.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Purchase_storyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Purchase_story.
     * @param {Purchase_storyDeleteArgs} args - Arguments to delete one Purchase_story.
     * @example
     * // Delete one Purchase_story
     * const Purchase_story = await prisma.purchase_story.delete({
     *   where: {
     *     // ... filter to delete one Purchase_story
     *   }
     * })
     * 
    **/
    delete<T extends Purchase_storyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyDeleteArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Purchase_story.
     * @param {Purchase_storyUpdateArgs} args - Arguments to update one Purchase_story.
     * @example
     * // Update one Purchase_story
     * const purchase_story = await prisma.purchase_story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Purchase_storyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyUpdateArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Purchase_stories.
     * @param {Purchase_storyDeleteManyArgs} args - Arguments to filter Purchase_stories to delete.
     * @example
     * // Delete a few Purchase_stories
     * const { count } = await prisma.purchase_story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Purchase_storyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Purchase_storyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchase_stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchase_stories
     * const purchase_story = await prisma.purchase_story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Purchase_storyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Purchase_story.
     * @param {Purchase_storyUpsertArgs} args - Arguments to update or create a Purchase_story.
     * @example
     * // Update or create a Purchase_story
     * const purchase_story = await prisma.purchase_story.upsert({
     *   create: {
     *     // ... data to create a Purchase_story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase_story we want to update
     *   }
     * })
    **/
    upsert<T extends Purchase_storyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Purchase_storyUpsertArgs<ExtArgs>>
    ): Prisma__Purchase_storyClient<$Result.GetResult<Prisma.$Purchase_storyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Purchase_stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyCountArgs} args - Arguments to filter Purchase_stories to count.
     * @example
     * // Count the number of Purchase_stories
     * const count = await prisma.purchase_story.count({
     *   where: {
     *     // ... the filter for the Purchase_stories we want to count
     *   }
     * })
    **/
    count<T extends Purchase_storyCountArgs>(
      args?: Subset<T, Purchase_storyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Purchase_storyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase_story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Purchase_storyAggregateArgs>(args: Subset<T, Purchase_storyAggregateArgs>): Prisma.PrismaPromise<GetPurchase_storyAggregateType<T>>

    /**
     * Group by Purchase_story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Purchase_storyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Purchase_storyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Purchase_storyGroupByArgs['orderBy'] }
        : { orderBy?: Purchase_storyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Purchase_storyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchase_storyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Purchase_story model
   */
  readonly fields: Purchase_storyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase_story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Purchase_storyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Goods<T extends Purchase_story$GoodsArgs<ExtArgs> = {}>(args?: Subset<T, Purchase_story$GoodsArgs<ExtArgs>>): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Purchase_story model
   */ 
  interface Purchase_storyFieldRefs {
    readonly id: FieldRef<"Purchase_story", 'Int'>
    readonly good_id: FieldRef<"Purchase_story", 'Int'>
    readonly user_id: FieldRef<"Purchase_story", 'Int'>
    readonly quantity: FieldRef<"Purchase_story", 'Int'>
    readonly price: FieldRef<"Purchase_story", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Purchase_story findUnique
   */
  export type Purchase_storyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter, which Purchase_story to fetch.
     */
    where: Purchase_storyWhereUniqueInput
  }


  /**
   * Purchase_story findUniqueOrThrow
   */
  export type Purchase_storyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter, which Purchase_story to fetch.
     */
    where: Purchase_storyWhereUniqueInput
  }


  /**
   * Purchase_story findFirst
   */
  export type Purchase_storyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter, which Purchase_story to fetch.
     */
    where?: Purchase_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchase_stories to fetch.
     */
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchase_stories.
     */
    cursor?: Purchase_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchase_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchase_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchase_stories.
     */
    distinct?: Purchase_storyScalarFieldEnum | Purchase_storyScalarFieldEnum[]
  }


  /**
   * Purchase_story findFirstOrThrow
   */
  export type Purchase_storyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter, which Purchase_story to fetch.
     */
    where?: Purchase_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchase_stories to fetch.
     */
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchase_stories.
     */
    cursor?: Purchase_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchase_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchase_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchase_stories.
     */
    distinct?: Purchase_storyScalarFieldEnum | Purchase_storyScalarFieldEnum[]
  }


  /**
   * Purchase_story findMany
   */
  export type Purchase_storyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter, which Purchase_stories to fetch.
     */
    where?: Purchase_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchase_stories to fetch.
     */
    orderBy?: Purchase_storyOrderByWithRelationInput | Purchase_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchase_stories.
     */
    cursor?: Purchase_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchase_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchase_stories.
     */
    skip?: number
    distinct?: Purchase_storyScalarFieldEnum | Purchase_storyScalarFieldEnum[]
  }


  /**
   * Purchase_story create
   */
  export type Purchase_storyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * The data needed to create a Purchase_story.
     */
    data: XOR<Purchase_storyCreateInput, Purchase_storyUncheckedCreateInput>
  }


  /**
   * Purchase_story createMany
   */
  export type Purchase_storyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Purchase_stories.
     */
    data: Purchase_storyCreateManyInput | Purchase_storyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Purchase_story update
   */
  export type Purchase_storyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * The data needed to update a Purchase_story.
     */
    data: XOR<Purchase_storyUpdateInput, Purchase_storyUncheckedUpdateInput>
    /**
     * Choose, which Purchase_story to update.
     */
    where: Purchase_storyWhereUniqueInput
  }


  /**
   * Purchase_story updateMany
   */
  export type Purchase_storyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Purchase_stories.
     */
    data: XOR<Purchase_storyUpdateManyMutationInput, Purchase_storyUncheckedUpdateManyInput>
    /**
     * Filter which Purchase_stories to update
     */
    where?: Purchase_storyWhereInput
  }


  /**
   * Purchase_story upsert
   */
  export type Purchase_storyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * The filter to search for the Purchase_story to update in case it exists.
     */
    where: Purchase_storyWhereUniqueInput
    /**
     * In case the Purchase_story found by the `where` argument doesn't exist, create a new Purchase_story with this data.
     */
    create: XOR<Purchase_storyCreateInput, Purchase_storyUncheckedCreateInput>
    /**
     * In case the Purchase_story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Purchase_storyUpdateInput, Purchase_storyUncheckedUpdateInput>
  }


  /**
   * Purchase_story delete
   */
  export type Purchase_storyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
    /**
     * Filter which Purchase_story to delete.
     */
    where: Purchase_storyWhereUniqueInput
  }


  /**
   * Purchase_story deleteMany
   */
  export type Purchase_storyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchase_stories to delete
     */
    where?: Purchase_storyWhereInput
  }


  /**
   * Purchase_story.Goods
   */
  export type Purchase_story$GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    where?: GoodsWhereInput
  }


  /**
   * Purchase_story without action
   */
  export type Purchase_storyDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase_story
     */
    select?: Purchase_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Purchase_storyInclude<ExtArgs> | null
  }



  /**
   * Model Visit_story
   */

  export type AggregateVisit_story = {
    _count: Visit_storyCountAggregateOutputType | null
    _avg: Visit_storyAvgAggregateOutputType | null
    _sum: Visit_storySumAggregateOutputType | null
    _min: Visit_storyMinAggregateOutputType | null
    _max: Visit_storyMaxAggregateOutputType | null
  }

  export type Visit_storyAvgAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
  }

  export type Visit_storySumAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
  }

  export type Visit_storyMinAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
  }

  export type Visit_storyMaxAggregateOutputType = {
    id: number | null
    good_id: number | null
    user_id: number | null
  }

  export type Visit_storyCountAggregateOutputType = {
    id: number
    good_id: number
    user_id: number
    _all: number
  }


  export type Visit_storyAvgAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
  }

  export type Visit_storySumAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
  }

  export type Visit_storyMinAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
  }

  export type Visit_storyMaxAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
  }

  export type Visit_storyCountAggregateInputType = {
    id?: true
    good_id?: true
    user_id?: true
    _all?: true
  }

  export type Visit_storyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visit_story to aggregate.
     */
    where?: Visit_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visit_stories to fetch.
     */
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Visit_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visit_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visit_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Visit_stories
    **/
    _count?: true | Visit_storyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Visit_storyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Visit_storySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Visit_storyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Visit_storyMaxAggregateInputType
  }

  export type GetVisit_storyAggregateType<T extends Visit_storyAggregateArgs> = {
        [P in keyof T & keyof AggregateVisit_story]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisit_story[P]>
      : GetScalarType<T[P], AggregateVisit_story[P]>
  }




  export type Visit_storyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Visit_storyWhereInput
    orderBy?: Visit_storyOrderByWithAggregationInput | Visit_storyOrderByWithAggregationInput[]
    by: Visit_storyScalarFieldEnum[] | Visit_storyScalarFieldEnum
    having?: Visit_storyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Visit_storyCountAggregateInputType | true
    _avg?: Visit_storyAvgAggregateInputType
    _sum?: Visit_storySumAggregateInputType
    _min?: Visit_storyMinAggregateInputType
    _max?: Visit_storyMaxAggregateInputType
  }

  export type Visit_storyGroupByOutputType = {
    id: number
    good_id: number
    user_id: number
    _count: Visit_storyCountAggregateOutputType | null
    _avg: Visit_storyAvgAggregateOutputType | null
    _sum: Visit_storySumAggregateOutputType | null
    _min: Visit_storyMinAggregateOutputType | null
    _max: Visit_storyMaxAggregateOutputType | null
  }

  type GetVisit_storyGroupByPayload<T extends Visit_storyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Visit_storyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Visit_storyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Visit_storyGroupByOutputType[P]>
            : GetScalarType<T[P], Visit_storyGroupByOutputType[P]>
        }
      >
    >


  export type Visit_storySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    good_id?: boolean
    user_id?: boolean
    Goods?: boolean | Visit_story$GoodsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visit_story"]>

  export type Visit_storySelectScalar = {
    id?: boolean
    good_id?: boolean
    user_id?: boolean
  }

  export type Visit_storyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Goods?: boolean | Visit_story$GoodsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $Visit_storyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Visit_story"
    objects: {
      Goods: Prisma.$GoodsPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      good_id: number
      user_id: number
    }, ExtArgs["result"]["visit_story"]>
    composites: {}
  }


  type Visit_storyGetPayload<S extends boolean | null | undefined | Visit_storyDefaultArgs> = $Result.GetResult<Prisma.$Visit_storyPayload, S>

  type Visit_storyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Visit_storyFindManyArgs, 'select' | 'include'> & {
      select?: Visit_storyCountAggregateInputType | true
    }

  export interface Visit_storyDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Visit_story'], meta: { name: 'Visit_story' } }
    /**
     * Find zero or one Visit_story that matches the filter.
     * @param {Visit_storyFindUniqueArgs} args - Arguments to find a Visit_story
     * @example
     * // Get one Visit_story
     * const visit_story = await prisma.visit_story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Visit_storyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyFindUniqueArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Visit_story that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Visit_storyFindUniqueOrThrowArgs} args - Arguments to find a Visit_story
     * @example
     * // Get one Visit_story
     * const visit_story = await prisma.visit_story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Visit_storyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Visit_story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyFindFirstArgs} args - Arguments to find a Visit_story
     * @example
     * // Get one Visit_story
     * const visit_story = await prisma.visit_story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Visit_storyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyFindFirstArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Visit_story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyFindFirstOrThrowArgs} args - Arguments to find a Visit_story
     * @example
     * // Get one Visit_story
     * const visit_story = await prisma.visit_story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Visit_storyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Visit_stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visit_stories
     * const visit_stories = await prisma.visit_story.findMany()
     * 
     * // Get first 10 Visit_stories
     * const visit_stories = await prisma.visit_story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visit_storyWithIdOnly = await prisma.visit_story.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Visit_storyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Visit_story.
     * @param {Visit_storyCreateArgs} args - Arguments to create a Visit_story.
     * @example
     * // Create one Visit_story
     * const Visit_story = await prisma.visit_story.create({
     *   data: {
     *     // ... data to create a Visit_story
     *   }
     * })
     * 
    **/
    create<T extends Visit_storyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyCreateArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Visit_stories.
     *     @param {Visit_storyCreateManyArgs} args - Arguments to create many Visit_stories.
     *     @example
     *     // Create many Visit_stories
     *     const visit_story = await prisma.visit_story.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Visit_storyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Visit_story.
     * @param {Visit_storyDeleteArgs} args - Arguments to delete one Visit_story.
     * @example
     * // Delete one Visit_story
     * const Visit_story = await prisma.visit_story.delete({
     *   where: {
     *     // ... filter to delete one Visit_story
     *   }
     * })
     * 
    **/
    delete<T extends Visit_storyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyDeleteArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Visit_story.
     * @param {Visit_storyUpdateArgs} args - Arguments to update one Visit_story.
     * @example
     * // Update one Visit_story
     * const visit_story = await prisma.visit_story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Visit_storyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyUpdateArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Visit_stories.
     * @param {Visit_storyDeleteManyArgs} args - Arguments to filter Visit_stories to delete.
     * @example
     * // Delete a few Visit_stories
     * const { count } = await prisma.visit_story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Visit_storyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Visit_storyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visit_stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visit_stories
     * const visit_story = await prisma.visit_story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Visit_storyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Visit_story.
     * @param {Visit_storyUpsertArgs} args - Arguments to update or create a Visit_story.
     * @example
     * // Update or create a Visit_story
     * const visit_story = await prisma.visit_story.upsert({
     *   create: {
     *     // ... data to create a Visit_story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visit_story we want to update
     *   }
     * })
    **/
    upsert<T extends Visit_storyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Visit_storyUpsertArgs<ExtArgs>>
    ): Prisma__Visit_storyClient<$Result.GetResult<Prisma.$Visit_storyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Visit_stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyCountArgs} args - Arguments to filter Visit_stories to count.
     * @example
     * // Count the number of Visit_stories
     * const count = await prisma.visit_story.count({
     *   where: {
     *     // ... the filter for the Visit_stories we want to count
     *   }
     * })
    **/
    count<T extends Visit_storyCountArgs>(
      args?: Subset<T, Visit_storyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Visit_storyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visit_story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Visit_storyAggregateArgs>(args: Subset<T, Visit_storyAggregateArgs>): Prisma.PrismaPromise<GetVisit_storyAggregateType<T>>

    /**
     * Group by Visit_story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Visit_storyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Visit_storyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Visit_storyGroupByArgs['orderBy'] }
        : { orderBy?: Visit_storyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Visit_storyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisit_storyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Visit_story model
   */
  readonly fields: Visit_storyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Visit_story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Visit_storyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Goods<T extends Visit_story$GoodsArgs<ExtArgs> = {}>(args?: Subset<T, Visit_story$GoodsArgs<ExtArgs>>): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Visit_story model
   */ 
  interface Visit_storyFieldRefs {
    readonly id: FieldRef<"Visit_story", 'Int'>
    readonly good_id: FieldRef<"Visit_story", 'Int'>
    readonly user_id: FieldRef<"Visit_story", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Visit_story findUnique
   */
  export type Visit_storyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter, which Visit_story to fetch.
     */
    where: Visit_storyWhereUniqueInput
  }


  /**
   * Visit_story findUniqueOrThrow
   */
  export type Visit_storyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter, which Visit_story to fetch.
     */
    where: Visit_storyWhereUniqueInput
  }


  /**
   * Visit_story findFirst
   */
  export type Visit_storyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter, which Visit_story to fetch.
     */
    where?: Visit_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visit_stories to fetch.
     */
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visit_stories.
     */
    cursor?: Visit_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visit_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visit_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visit_stories.
     */
    distinct?: Visit_storyScalarFieldEnum | Visit_storyScalarFieldEnum[]
  }


  /**
   * Visit_story findFirstOrThrow
   */
  export type Visit_storyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter, which Visit_story to fetch.
     */
    where?: Visit_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visit_stories to fetch.
     */
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visit_stories.
     */
    cursor?: Visit_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visit_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visit_stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visit_stories.
     */
    distinct?: Visit_storyScalarFieldEnum | Visit_storyScalarFieldEnum[]
  }


  /**
   * Visit_story findMany
   */
  export type Visit_storyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter, which Visit_stories to fetch.
     */
    where?: Visit_storyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visit_stories to fetch.
     */
    orderBy?: Visit_storyOrderByWithRelationInput | Visit_storyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Visit_stories.
     */
    cursor?: Visit_storyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visit_stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visit_stories.
     */
    skip?: number
    distinct?: Visit_storyScalarFieldEnum | Visit_storyScalarFieldEnum[]
  }


  /**
   * Visit_story create
   */
  export type Visit_storyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * The data needed to create a Visit_story.
     */
    data: XOR<Visit_storyCreateInput, Visit_storyUncheckedCreateInput>
  }


  /**
   * Visit_story createMany
   */
  export type Visit_storyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Visit_stories.
     */
    data: Visit_storyCreateManyInput | Visit_storyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Visit_story update
   */
  export type Visit_storyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * The data needed to update a Visit_story.
     */
    data: XOR<Visit_storyUpdateInput, Visit_storyUncheckedUpdateInput>
    /**
     * Choose, which Visit_story to update.
     */
    where: Visit_storyWhereUniqueInput
  }


  /**
   * Visit_story updateMany
   */
  export type Visit_storyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Visit_stories.
     */
    data: XOR<Visit_storyUpdateManyMutationInput, Visit_storyUncheckedUpdateManyInput>
    /**
     * Filter which Visit_stories to update
     */
    where?: Visit_storyWhereInput
  }


  /**
   * Visit_story upsert
   */
  export type Visit_storyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * The filter to search for the Visit_story to update in case it exists.
     */
    where: Visit_storyWhereUniqueInput
    /**
     * In case the Visit_story found by the `where` argument doesn't exist, create a new Visit_story with this data.
     */
    create: XOR<Visit_storyCreateInput, Visit_storyUncheckedCreateInput>
    /**
     * In case the Visit_story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Visit_storyUpdateInput, Visit_storyUncheckedUpdateInput>
  }


  /**
   * Visit_story delete
   */
  export type Visit_storyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
    /**
     * Filter which Visit_story to delete.
     */
    where: Visit_storyWhereUniqueInput
  }


  /**
   * Visit_story deleteMany
   */
  export type Visit_storyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visit_stories to delete
     */
    where?: Visit_storyWhereInput
  }


  /**
   * Visit_story.Goods
   */
  export type Visit_story$GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    where?: GoodsWhereInput
  }


  /**
   * Visit_story without action
   */
  export type Visit_storyDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visit_story
     */
    select?: Visit_storySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Visit_storyInclude<ExtArgs> | null
  }



  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    good_id: number | null
    star_rate: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    good_id: number | null
    star_rate: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    good_id: number | null
    star_rate: number | null
    content: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    good_id: number | null
    star_rate: number | null
    content: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    user_id: number
    good_id: number
    star_rate: number
    content: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    user_id?: true
    good_id?: true
    star_rate?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    user_id?: true
    good_id?: true
    star_rate?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    user_id?: true
    good_id?: true
    star_rate?: true
    content?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    user_id?: true
    good_id?: true
    star_rate?: true
    content?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    user_id?: true
    good_id?: true
    star_rate?: true
    content?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    user_id: number
    good_id: number
    star_rate: number
    content: string
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    good_id?: boolean
    star_rate?: boolean
    content?: boolean
    User?: boolean | Feedback$UserArgs<ExtArgs>
    Goods?: boolean | Feedback$GoodsArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    user_id?: boolean
    good_id?: boolean
    star_rate?: boolean
    content?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | Feedback$UserArgs<ExtArgs>
    Goods?: boolean | Feedback$GoodsArgs<ExtArgs>
  }


  export type $FeedbackPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
      Goods: Prisma.$GoodsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      user_id: number
      good_id: number
      star_rate: number
      content: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }


  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeedbackFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
    **/
    create<T extends FeedbackCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Feedbacks.
     *     @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     *     @example
     *     // Create many Feedbacks
     *     const feedback = await prisma.feedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends Feedback$UserArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Goods<T extends Feedback$GoodsArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$GoodsArgs<ExtArgs>>): Prisma__GoodsClient<$Result.GetResult<Prisma.$GoodsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly user_id: FieldRef<"Feedback", 'Int'>
    readonly good_id: FieldRef<"Feedback", 'Int'>
    readonly star_rate: FieldRef<"Feedback", 'Int'>
    readonly content: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }


  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }


  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback.User
   */
  export type Feedback$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Feedback.Goods
   */
  export type Feedback$GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goods
     */
    select?: GoodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoodsInclude<ExtArgs> | null
    where?: GoodsWhereInput
  }


  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const SubCategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    categoriesId: 'categoriesId'
  };

  export type SubCategoriesScalarFieldEnum = (typeof SubCategoriesScalarFieldEnum)[keyof typeof SubCategoriesScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    password: 'password',
    name: 'name',
    phone_number: 'phone_number'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FavouritesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    good_id: 'good_id'
  };

  export type FavouritesScalarFieldEnum = (typeof FavouritesScalarFieldEnum)[keyof typeof FavouritesScalarFieldEnum]


  export const GoodsScalarFieldEnum: {
    id: 'id',
    subcategory_id: 'subcategory_id',
    title: 'title',
    price: 'price',
    width: 'width',
    height: 'height',
    length: 'length',
    color: 'color',
    manufacter: 'manufacter'
  };

  export type GoodsScalarFieldEnum = (typeof GoodsScalarFieldEnum)[keyof typeof GoodsScalarFieldEnum]


  export const Purchase_storyScalarFieldEnum: {
    id: 'id',
    good_id: 'good_id',
    user_id: 'user_id',
    quantity: 'quantity',
    price: 'price'
  };

  export type Purchase_storyScalarFieldEnum = (typeof Purchase_storyScalarFieldEnum)[keyof typeof Purchase_storyScalarFieldEnum]


  export const Visit_storyScalarFieldEnum: {
    id: 'id',
    good_id: 'good_id',
    user_id: 'user_id'
  };

  export type Visit_storyScalarFieldEnum = (typeof Visit_storyScalarFieldEnum)[keyof typeof Visit_storyScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    good_id: 'good_id',
    star_rate: 'star_rate',
    content: 'content'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CategoriesWhereInput = {
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    id?: IntFilter<"Categories"> | number
    title?: StringFilter<"Categories"> | string
    subcategories?: SubCategoriesListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    subcategories?: SubCategoriesOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    title?: StringFilter<"Categories"> | string
    subcategories?: SubCategoriesListRelationFilter
  }, "id">

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _avg?: CategoriesAvgOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
    _sum?: CategoriesSumOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    OR?: CategoriesScalarWhereWithAggregatesInput[]
    NOT?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categories"> | number
    title?: StringWithAggregatesFilter<"Categories"> | string
  }

  export type SubCategoriesWhereInput = {
    AND?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    OR?: SubCategoriesWhereInput[]
    NOT?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    id?: IntFilter<"SubCategories"> | number
    title?: StringFilter<"SubCategories"> | string
    categoriesId?: IntNullableFilter<"SubCategories"> | number | null
    Categories?: XOR<CategoriesNullableRelationFilter, CategoriesWhereInput> | null
    Goods?: GoodsListRelationFilter
  }

  export type SubCategoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    categoriesId?: SortOrderInput | SortOrder
    Categories?: CategoriesOrderByWithRelationInput
    Goods?: GoodsOrderByRelationAggregateInput
  }

  export type SubCategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    OR?: SubCategoriesWhereInput[]
    NOT?: SubCategoriesWhereInput | SubCategoriesWhereInput[]
    title?: StringFilter<"SubCategories"> | string
    categoriesId?: IntNullableFilter<"SubCategories"> | number | null
    Categories?: XOR<CategoriesNullableRelationFilter, CategoriesWhereInput> | null
    Goods?: GoodsListRelationFilter
  }, "id">

  export type SubCategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    categoriesId?: SortOrderInput | SortOrder
    _count?: SubCategoriesCountOrderByAggregateInput
    _avg?: SubCategoriesAvgOrderByAggregateInput
    _max?: SubCategoriesMaxOrderByAggregateInput
    _min?: SubCategoriesMinOrderByAggregateInput
    _sum?: SubCategoriesSumOrderByAggregateInput
  }

  export type SubCategoriesScalarWhereWithAggregatesInput = {
    AND?: SubCategoriesScalarWhereWithAggregatesInput | SubCategoriesScalarWhereWithAggregatesInput[]
    OR?: SubCategoriesScalarWhereWithAggregatesInput[]
    NOT?: SubCategoriesScalarWhereWithAggregatesInput | SubCategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubCategories"> | number
    title?: StringWithAggregatesFilter<"SubCategories"> | string
    categoriesId?: IntNullableWithAggregatesFilter<"SubCategories"> | number | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    login?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    Favourites?: FavouritesListRelationFilter
    Purchase_story?: Purchase_storyListRelationFilter
    Visit_story?: Visit_storyListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone_number?: SortOrder
    Favourites?: FavouritesOrderByRelationAggregateInput
    Purchase_story?: Purchase_storyOrderByRelationAggregateInput
    Visit_story?: Visit_storyOrderByRelationAggregateInput
    Feedback?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    login?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    Favourites?: FavouritesListRelationFilter
    Purchase_story?: Purchase_storyListRelationFilter
    Visit_story?: Visit_storyListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone_number?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    login?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    phone_number?: StringWithAggregatesFilter<"User"> | string
  }

  export type FavouritesWhereInput = {
    AND?: FavouritesWhereInput | FavouritesWhereInput[]
    OR?: FavouritesWhereInput[]
    NOT?: FavouritesWhereInput | FavouritesWhereInput[]
    id?: IntFilter<"Favourites"> | number
    userId?: IntNullableFilter<"Favourites"> | number | null
    good_id?: IntFilter<"Favourites"> | number
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
  }

  export type FavouritesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    good_id?: SortOrder
    User?: UserOrderByWithRelationInput
    Goods?: GoodsOrderByWithRelationInput
  }

  export type FavouritesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FavouritesWhereInput | FavouritesWhereInput[]
    OR?: FavouritesWhereInput[]
    NOT?: FavouritesWhereInput | FavouritesWhereInput[]
    userId?: IntNullableFilter<"Favourites"> | number | null
    good_id?: IntFilter<"Favourites"> | number
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
  }, "id">

  export type FavouritesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    good_id?: SortOrder
    _count?: FavouritesCountOrderByAggregateInput
    _avg?: FavouritesAvgOrderByAggregateInput
    _max?: FavouritesMaxOrderByAggregateInput
    _min?: FavouritesMinOrderByAggregateInput
    _sum?: FavouritesSumOrderByAggregateInput
  }

  export type FavouritesScalarWhereWithAggregatesInput = {
    AND?: FavouritesScalarWhereWithAggregatesInput | FavouritesScalarWhereWithAggregatesInput[]
    OR?: FavouritesScalarWhereWithAggregatesInput[]
    NOT?: FavouritesScalarWhereWithAggregatesInput | FavouritesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Favourites"> | number
    userId?: IntNullableWithAggregatesFilter<"Favourites"> | number | null
    good_id?: IntWithAggregatesFilter<"Favourites"> | number
  }

  export type GoodsWhereInput = {
    AND?: GoodsWhereInput | GoodsWhereInput[]
    OR?: GoodsWhereInput[]
    NOT?: GoodsWhereInput | GoodsWhereInput[]
    id?: IntFilter<"Goods"> | number
    subcategory_id?: IntFilter<"Goods"> | number
    title?: StringFilter<"Goods"> | string
    price?: IntFilter<"Goods"> | number
    width?: FloatFilter<"Goods"> | number
    height?: FloatFilter<"Goods"> | number
    length?: FloatFilter<"Goods"> | number
    color?: StringFilter<"Goods"> | string
    manufacter?: StringFilter<"Goods"> | string
    Subcategories?: XOR<SubCategoriesNullableRelationFilter, SubCategoriesWhereInput> | null
    Favourites?: FavouritesListRelationFilter
    Purchase_story?: Purchase_storyListRelationFilter
    Visit_story?: Visit_storyListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }

  export type GoodsOrderByWithRelationInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
    color?: SortOrder
    manufacter?: SortOrder
    Subcategories?: SubCategoriesOrderByWithRelationInput
    Favourites?: FavouritesOrderByRelationAggregateInput
    Purchase_story?: Purchase_storyOrderByRelationAggregateInput
    Visit_story?: Visit_storyOrderByRelationAggregateInput
    Feedback?: FeedbackOrderByRelationAggregateInput
  }

  export type GoodsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GoodsWhereInput | GoodsWhereInput[]
    OR?: GoodsWhereInput[]
    NOT?: GoodsWhereInput | GoodsWhereInput[]
    subcategory_id?: IntFilter<"Goods"> | number
    title?: StringFilter<"Goods"> | string
    price?: IntFilter<"Goods"> | number
    width?: FloatFilter<"Goods"> | number
    height?: FloatFilter<"Goods"> | number
    length?: FloatFilter<"Goods"> | number
    color?: StringFilter<"Goods"> | string
    manufacter?: StringFilter<"Goods"> | string
    Subcategories?: XOR<SubCategoriesNullableRelationFilter, SubCategoriesWhereInput> | null
    Favourites?: FavouritesListRelationFilter
    Purchase_story?: Purchase_storyListRelationFilter
    Visit_story?: Visit_storyListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }, "id">

  export type GoodsOrderByWithAggregationInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
    color?: SortOrder
    manufacter?: SortOrder
    _count?: GoodsCountOrderByAggregateInput
    _avg?: GoodsAvgOrderByAggregateInput
    _max?: GoodsMaxOrderByAggregateInput
    _min?: GoodsMinOrderByAggregateInput
    _sum?: GoodsSumOrderByAggregateInput
  }

  export type GoodsScalarWhereWithAggregatesInput = {
    AND?: GoodsScalarWhereWithAggregatesInput | GoodsScalarWhereWithAggregatesInput[]
    OR?: GoodsScalarWhereWithAggregatesInput[]
    NOT?: GoodsScalarWhereWithAggregatesInput | GoodsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Goods"> | number
    subcategory_id?: IntWithAggregatesFilter<"Goods"> | number
    title?: StringWithAggregatesFilter<"Goods"> | string
    price?: IntWithAggregatesFilter<"Goods"> | number
    width?: FloatWithAggregatesFilter<"Goods"> | number
    height?: FloatWithAggregatesFilter<"Goods"> | number
    length?: FloatWithAggregatesFilter<"Goods"> | number
    color?: StringWithAggregatesFilter<"Goods"> | string
    manufacter?: StringWithAggregatesFilter<"Goods"> | string
  }

  export type Purchase_storyWhereInput = {
    AND?: Purchase_storyWhereInput | Purchase_storyWhereInput[]
    OR?: Purchase_storyWhereInput[]
    NOT?: Purchase_storyWhereInput | Purchase_storyWhereInput[]
    id?: IntFilter<"Purchase_story"> | number
    good_id?: IntFilter<"Purchase_story"> | number
    user_id?: IntFilter<"Purchase_story"> | number
    quantity?: IntFilter<"Purchase_story"> | number
    price?: IntFilter<"Purchase_story"> | number
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type Purchase_storyOrderByWithRelationInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    Goods?: GoodsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type Purchase_storyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Purchase_storyWhereInput | Purchase_storyWhereInput[]
    OR?: Purchase_storyWhereInput[]
    NOT?: Purchase_storyWhereInput | Purchase_storyWhereInput[]
    good_id?: IntFilter<"Purchase_story"> | number
    user_id?: IntFilter<"Purchase_story"> | number
    quantity?: IntFilter<"Purchase_story"> | number
    price?: IntFilter<"Purchase_story"> | number
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type Purchase_storyOrderByWithAggregationInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    _count?: Purchase_storyCountOrderByAggregateInput
    _avg?: Purchase_storyAvgOrderByAggregateInput
    _max?: Purchase_storyMaxOrderByAggregateInput
    _min?: Purchase_storyMinOrderByAggregateInput
    _sum?: Purchase_storySumOrderByAggregateInput
  }

  export type Purchase_storyScalarWhereWithAggregatesInput = {
    AND?: Purchase_storyScalarWhereWithAggregatesInput | Purchase_storyScalarWhereWithAggregatesInput[]
    OR?: Purchase_storyScalarWhereWithAggregatesInput[]
    NOT?: Purchase_storyScalarWhereWithAggregatesInput | Purchase_storyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Purchase_story"> | number
    good_id?: IntWithAggregatesFilter<"Purchase_story"> | number
    user_id?: IntWithAggregatesFilter<"Purchase_story"> | number
    quantity?: IntWithAggregatesFilter<"Purchase_story"> | number
    price?: IntWithAggregatesFilter<"Purchase_story"> | number
  }

  export type Visit_storyWhereInput = {
    AND?: Visit_storyWhereInput | Visit_storyWhereInput[]
    OR?: Visit_storyWhereInput[]
    NOT?: Visit_storyWhereInput | Visit_storyWhereInput[]
    id?: IntFilter<"Visit_story"> | number
    good_id?: IntFilter<"Visit_story"> | number
    user_id?: IntFilter<"Visit_story"> | number
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type Visit_storyOrderByWithRelationInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    Goods?: GoodsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type Visit_storyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Visit_storyWhereInput | Visit_storyWhereInput[]
    OR?: Visit_storyWhereInput[]
    NOT?: Visit_storyWhereInput | Visit_storyWhereInput[]
    good_id?: IntFilter<"Visit_story"> | number
    user_id?: IntFilter<"Visit_story"> | number
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type Visit_storyOrderByWithAggregationInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    _count?: Visit_storyCountOrderByAggregateInput
    _avg?: Visit_storyAvgOrderByAggregateInput
    _max?: Visit_storyMaxOrderByAggregateInput
    _min?: Visit_storyMinOrderByAggregateInput
    _sum?: Visit_storySumOrderByAggregateInput
  }

  export type Visit_storyScalarWhereWithAggregatesInput = {
    AND?: Visit_storyScalarWhereWithAggregatesInput | Visit_storyScalarWhereWithAggregatesInput[]
    OR?: Visit_storyScalarWhereWithAggregatesInput[]
    NOT?: Visit_storyScalarWhereWithAggregatesInput | Visit_storyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Visit_story"> | number
    good_id?: IntWithAggregatesFilter<"Visit_story"> | number
    user_id?: IntWithAggregatesFilter<"Visit_story"> | number
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    user_id?: IntFilter<"Feedback"> | number
    good_id?: IntFilter<"Feedback"> | number
    star_rate?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
    content?: SortOrder
    User?: UserOrderByWithRelationInput
    Goods?: GoodsOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    user_id?: IntFilter<"Feedback"> | number
    good_id?: IntFilter<"Feedback"> | number
    star_rate?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    Goods?: XOR<GoodsNullableRelationFilter, GoodsWhereInput> | null
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
    content?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    user_id?: IntWithAggregatesFilter<"Feedback"> | number
    good_id?: IntWithAggregatesFilter<"Feedback"> | number
    star_rate?: IntWithAggregatesFilter<"Feedback"> | number
    content?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type CategoriesCreateInput = {
    title: string
    subcategories?: SubCategoriesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: number
    title: string
    subcategories?: SubCategoriesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    subcategories?: SubCategoriesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    subcategories?: SubCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoriesCreateManyInput = {
    id?: number
    title: string
  }

  export type CategoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SubCategoriesCreateInput = {
    title: string
    Categories?: CategoriesCreateNestedOneWithoutSubcategoriesInput
    Goods?: GoodsCreateNestedManyWithoutSubcategoriesInput
  }

  export type SubCategoriesUncheckedCreateInput = {
    id?: number
    title: string
    categoriesId?: number | null
    Goods?: GoodsUncheckedCreateNestedManyWithoutSubcategoriesInput
  }

  export type SubCategoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    Categories?: CategoriesUpdateOneWithoutSubcategoriesNestedInput
    Goods?: GoodsUpdateManyWithoutSubcategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    categoriesId?: NullableIntFieldUpdateOperationsInput | number | null
    Goods?: GoodsUncheckedUpdateManyWithoutSubcategoriesNestedInput
  }

  export type SubCategoriesCreateManyInput = {
    id?: number
    title: string
    categoriesId?: number | null
  }

  export type SubCategoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type SubCategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    categoriesId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
  }

  export type UserUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type FavouritesCreateInput = {
    User?: UserCreateNestedOneWithoutFavouritesInput
    Goods?: GoodsCreateNestedOneWithoutFavouritesInput
  }

  export type FavouritesUncheckedCreateInput = {
    id?: number
    userId?: number | null
    good_id: number
  }

  export type FavouritesUpdateInput = {
    User?: UserUpdateOneWithoutFavouritesNestedInput
    Goods?: GoodsUpdateOneWithoutFavouritesNestedInput
  }

  export type FavouritesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouritesCreateManyInput = {
    id?: number
    userId?: number | null
    good_id: number
  }

  export type FavouritesUpdateManyMutationInput = {

  }

  export type FavouritesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type GoodsCreateInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Subcategories?: SubCategoriesCreateNestedOneWithoutGoodsInput
    Favourites?: FavouritesCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Subcategories?: SubCategoriesUpdateOneWithoutGoodsNestedInput
    Favourites?: FavouritesUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsCreateManyInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
  }

  export type GoodsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
  }

  export type GoodsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
  }

  export type Purchase_storyCreateInput = {
    quantity: number
    price: number
    Goods?: GoodsCreateNestedOneWithoutPurchase_storyInput
    User: UserCreateNestedOneWithoutPurchase_storyInput
  }

  export type Purchase_storyUncheckedCreateInput = {
    id?: number
    good_id: number
    user_id: number
    quantity: number
    price: number
  }

  export type Purchase_storyUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    Goods?: GoodsUpdateOneWithoutPurchase_storyNestedInput
    User?: UserUpdateOneRequiredWithoutPurchase_storyNestedInput
  }

  export type Purchase_storyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Purchase_storyCreateManyInput = {
    id?: number
    good_id: number
    user_id: number
    quantity: number
    price: number
  }

  export type Purchase_storyUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Purchase_storyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyCreateInput = {
    Goods?: GoodsCreateNestedOneWithoutVisit_storyInput
    User: UserCreateNestedOneWithoutVisit_storyInput
  }

  export type Visit_storyUncheckedCreateInput = {
    id?: number
    good_id: number
    user_id: number
  }

  export type Visit_storyUpdateInput = {
    Goods?: GoodsUpdateOneWithoutVisit_storyNestedInput
    User?: UserUpdateOneRequiredWithoutVisit_storyNestedInput
  }

  export type Visit_storyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyCreateManyInput = {
    id?: number
    good_id: number
    user_id: number
  }

  export type Visit_storyUpdateManyMutationInput = {

  }

  export type Visit_storyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateInput = {
    star_rate: number
    content: string
    User?: UserCreateNestedOneWithoutFeedbackInput
    Goods?: GoodsCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    user_id: number
    good_id: number
    star_rate: number
    content: string
  }

  export type FeedbackUpdateInput = {
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutFeedbackNestedInput
    Goods?: GoodsUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    user_id: number
    good_id: number
    star_rate: number
    content: string
  }

  export type FeedbackUpdateManyMutationInput = {
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SubCategoriesListRelationFilter = {
    every?: SubCategoriesWhereInput
    some?: SubCategoriesWhereInput
    none?: SubCategoriesWhereInput
  }

  export type SubCategoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type CategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type CategoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoriesNullableRelationFilter = {
    is?: CategoriesWhereInput | null
    isNot?: CategoriesWhereInput | null
  }

  export type GoodsListRelationFilter = {
    every?: GoodsWhereInput
    some?: GoodsWhereInput
    none?: GoodsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GoodsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubCategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoriesId?: SortOrder
  }

  export type SubCategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    categoriesId?: SortOrder
  }

  export type SubCategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoriesId?: SortOrder
  }

  export type SubCategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    categoriesId?: SortOrder
  }

  export type SubCategoriesSumOrderByAggregateInput = {
    id?: SortOrder
    categoriesId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FavouritesListRelationFilter = {
    every?: FavouritesWhereInput
    some?: FavouritesWhereInput
    none?: FavouritesWhereInput
  }

  export type Purchase_storyListRelationFilter = {
    every?: Purchase_storyWhereInput
    some?: Purchase_storyWhereInput
    none?: Purchase_storyWhereInput
  }

  export type Visit_storyListRelationFilter = {
    every?: Visit_storyWhereInput
    some?: Visit_storyWhereInput
    none?: Visit_storyWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type FavouritesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Purchase_storyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Visit_storyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone_number?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone_number?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone_number?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GoodsNullableRelationFilter = {
    is?: GoodsWhereInput | null
    isNot?: GoodsWhereInput | null
  }

  export type FavouritesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    good_id?: SortOrder
  }

  export type FavouritesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    good_id?: SortOrder
  }

  export type FavouritesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    good_id?: SortOrder
  }

  export type FavouritesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    good_id?: SortOrder
  }

  export type FavouritesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    good_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SubCategoriesNullableRelationFilter = {
    is?: SubCategoriesWhereInput | null
    isNot?: SubCategoriesWhereInput | null
  }

  export type GoodsCountOrderByAggregateInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
    color?: SortOrder
    manufacter?: SortOrder
  }

  export type GoodsAvgOrderByAggregateInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
  }

  export type GoodsMaxOrderByAggregateInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
    color?: SortOrder
    manufacter?: SortOrder
  }

  export type GoodsMinOrderByAggregateInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
    color?: SortOrder
    manufacter?: SortOrder
  }

  export type GoodsSumOrderByAggregateInput = {
    id?: SortOrder
    subcategory_id?: SortOrder
    price?: SortOrder
    width?: SortOrder
    height?: SortOrder
    length?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type Purchase_storyCountOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type Purchase_storyAvgOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type Purchase_storyMaxOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type Purchase_storyMinOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type Purchase_storySumOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type Visit_storyCountOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
  }

  export type Visit_storyAvgOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
  }

  export type Visit_storyMaxOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
  }

  export type Visit_storyMinOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
  }

  export type Visit_storySumOrderByAggregateInput = {
    id?: SortOrder
    good_id?: SortOrder
    user_id?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
    content?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
    content?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
    content?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    good_id?: SortOrder
    star_rate?: SortOrder
  }

  export type SubCategoriesCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput> | SubCategoriesCreateWithoutCategoriesInput[] | SubCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoriesInput | SubCategoriesCreateOrConnectWithoutCategoriesInput[]
    createMany?: SubCategoriesCreateManyCategoriesInputEnvelope
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
  }

  export type SubCategoriesUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput> | SubCategoriesCreateWithoutCategoriesInput[] | SubCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoriesInput | SubCategoriesCreateOrConnectWithoutCategoriesInput[]
    createMany?: SubCategoriesCreateManyCategoriesInputEnvelope
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SubCategoriesUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput> | SubCategoriesCreateWithoutCategoriesInput[] | SubCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoriesInput | SubCategoriesCreateOrConnectWithoutCategoriesInput[]
    upsert?: SubCategoriesUpsertWithWhereUniqueWithoutCategoriesInput | SubCategoriesUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: SubCategoriesCreateManyCategoriesInputEnvelope
    set?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    disconnect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    delete?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    update?: SubCategoriesUpdateWithWhereUniqueWithoutCategoriesInput | SubCategoriesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: SubCategoriesUpdateManyWithWhereWithoutCategoriesInput | SubCategoriesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput> | SubCategoriesCreateWithoutCategoriesInput[] | SubCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutCategoriesInput | SubCategoriesCreateOrConnectWithoutCategoriesInput[]
    upsert?: SubCategoriesUpsertWithWhereUniqueWithoutCategoriesInput | SubCategoriesUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: SubCategoriesCreateManyCategoriesInputEnvelope
    set?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    disconnect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    delete?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    connect?: SubCategoriesWhereUniqueInput | SubCategoriesWhereUniqueInput[]
    update?: SubCategoriesUpdateWithWhereUniqueWithoutCategoriesInput | SubCategoriesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: SubCategoriesUpdateManyWithWhereWithoutCategoriesInput | SubCategoriesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
  }

  export type CategoriesCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<CategoriesCreateWithoutSubcategoriesInput, CategoriesUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutSubcategoriesInput
    connect?: CategoriesWhereUniqueInput
  }

  export type GoodsCreateNestedManyWithoutSubcategoriesInput = {
    create?: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput> | GoodsCreateWithoutSubcategoriesInput[] | GoodsUncheckedCreateWithoutSubcategoriesInput[]
    connectOrCreate?: GoodsCreateOrConnectWithoutSubcategoriesInput | GoodsCreateOrConnectWithoutSubcategoriesInput[]
    createMany?: GoodsCreateManySubcategoriesInputEnvelope
    connect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
  }

  export type GoodsUncheckedCreateNestedManyWithoutSubcategoriesInput = {
    create?: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput> | GoodsCreateWithoutSubcategoriesInput[] | GoodsUncheckedCreateWithoutSubcategoriesInput[]
    connectOrCreate?: GoodsCreateOrConnectWithoutSubcategoriesInput | GoodsCreateOrConnectWithoutSubcategoriesInput[]
    createMany?: GoodsCreateManySubcategoriesInputEnvelope
    connect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
  }

  export type CategoriesUpdateOneWithoutSubcategoriesNestedInput = {
    create?: XOR<CategoriesCreateWithoutSubcategoriesInput, CategoriesUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutSubcategoriesInput
    upsert?: CategoriesUpsertWithoutSubcategoriesInput
    disconnect?: CategoriesWhereInput | boolean
    delete?: CategoriesWhereInput | boolean
    connect?: CategoriesWhereUniqueInput
    update?: XOR<XOR<CategoriesUpdateToOneWithWhereWithoutSubcategoriesInput, CategoriesUpdateWithoutSubcategoriesInput>, CategoriesUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type GoodsUpdateManyWithoutSubcategoriesNestedInput = {
    create?: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput> | GoodsCreateWithoutSubcategoriesInput[] | GoodsUncheckedCreateWithoutSubcategoriesInput[]
    connectOrCreate?: GoodsCreateOrConnectWithoutSubcategoriesInput | GoodsCreateOrConnectWithoutSubcategoriesInput[]
    upsert?: GoodsUpsertWithWhereUniqueWithoutSubcategoriesInput | GoodsUpsertWithWhereUniqueWithoutSubcategoriesInput[]
    createMany?: GoodsCreateManySubcategoriesInputEnvelope
    set?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    disconnect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    delete?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    connect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    update?: GoodsUpdateWithWhereUniqueWithoutSubcategoriesInput | GoodsUpdateWithWhereUniqueWithoutSubcategoriesInput[]
    updateMany?: GoodsUpdateManyWithWhereWithoutSubcategoriesInput | GoodsUpdateManyWithWhereWithoutSubcategoriesInput[]
    deleteMany?: GoodsScalarWhereInput | GoodsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GoodsUncheckedUpdateManyWithoutSubcategoriesNestedInput = {
    create?: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput> | GoodsCreateWithoutSubcategoriesInput[] | GoodsUncheckedCreateWithoutSubcategoriesInput[]
    connectOrCreate?: GoodsCreateOrConnectWithoutSubcategoriesInput | GoodsCreateOrConnectWithoutSubcategoriesInput[]
    upsert?: GoodsUpsertWithWhereUniqueWithoutSubcategoriesInput | GoodsUpsertWithWhereUniqueWithoutSubcategoriesInput[]
    createMany?: GoodsCreateManySubcategoriesInputEnvelope
    set?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    disconnect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    delete?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    connect?: GoodsWhereUniqueInput | GoodsWhereUniqueInput[]
    update?: GoodsUpdateWithWhereUniqueWithoutSubcategoriesInput | GoodsUpdateWithWhereUniqueWithoutSubcategoriesInput[]
    updateMany?: GoodsUpdateManyWithWhereWithoutSubcategoriesInput | GoodsUpdateManyWithWhereWithoutSubcategoriesInput[]
    deleteMany?: GoodsScalarWhereInput | GoodsScalarWhereInput[]
  }

  export type FavouritesCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput> | FavouritesCreateWithoutUserInput[] | FavouritesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutUserInput | FavouritesCreateOrConnectWithoutUserInput[]
    createMany?: FavouritesCreateManyUserInputEnvelope
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
  }

  export type Purchase_storyCreateNestedManyWithoutUserInput = {
    create?: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput> | Purchase_storyCreateWithoutUserInput[] | Purchase_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutUserInput | Purchase_storyCreateOrConnectWithoutUserInput[]
    createMany?: Purchase_storyCreateManyUserInputEnvelope
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
  }

  export type Visit_storyCreateNestedManyWithoutUserInput = {
    create?: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput> | Visit_storyCreateWithoutUserInput[] | Visit_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutUserInput | Visit_storyCreateOrConnectWithoutUserInput[]
    createMany?: Visit_storyCreateManyUserInputEnvelope
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FavouritesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput> | FavouritesCreateWithoutUserInput[] | FavouritesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutUserInput | FavouritesCreateOrConnectWithoutUserInput[]
    createMany?: FavouritesCreateManyUserInputEnvelope
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
  }

  export type Purchase_storyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput> | Purchase_storyCreateWithoutUserInput[] | Purchase_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutUserInput | Purchase_storyCreateOrConnectWithoutUserInput[]
    createMany?: Purchase_storyCreateManyUserInputEnvelope
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
  }

  export type Visit_storyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput> | Visit_storyCreateWithoutUserInput[] | Visit_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutUserInput | Visit_storyCreateOrConnectWithoutUserInput[]
    createMany?: Visit_storyCreateManyUserInputEnvelope
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FavouritesUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput> | FavouritesCreateWithoutUserInput[] | FavouritesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutUserInput | FavouritesCreateOrConnectWithoutUserInput[]
    upsert?: FavouritesUpsertWithWhereUniqueWithoutUserInput | FavouritesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouritesCreateManyUserInputEnvelope
    set?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    disconnect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    delete?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    update?: FavouritesUpdateWithWhereUniqueWithoutUserInput | FavouritesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouritesUpdateManyWithWhereWithoutUserInput | FavouritesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
  }

  export type Purchase_storyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput> | Purchase_storyCreateWithoutUserInput[] | Purchase_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutUserInput | Purchase_storyCreateOrConnectWithoutUserInput[]
    upsert?: Purchase_storyUpsertWithWhereUniqueWithoutUserInput | Purchase_storyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Purchase_storyCreateManyUserInputEnvelope
    set?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    disconnect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    delete?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    update?: Purchase_storyUpdateWithWhereUniqueWithoutUserInput | Purchase_storyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Purchase_storyUpdateManyWithWhereWithoutUserInput | Purchase_storyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
  }

  export type Visit_storyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput> | Visit_storyCreateWithoutUserInput[] | Visit_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutUserInput | Visit_storyCreateOrConnectWithoutUserInput[]
    upsert?: Visit_storyUpsertWithWhereUniqueWithoutUserInput | Visit_storyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Visit_storyCreateManyUserInputEnvelope
    set?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    disconnect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    delete?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    update?: Visit_storyUpdateWithWhereUniqueWithoutUserInput | Visit_storyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Visit_storyUpdateManyWithWhereWithoutUserInput | Visit_storyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FavouritesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput> | FavouritesCreateWithoutUserInput[] | FavouritesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutUserInput | FavouritesCreateOrConnectWithoutUserInput[]
    upsert?: FavouritesUpsertWithWhereUniqueWithoutUserInput | FavouritesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouritesCreateManyUserInputEnvelope
    set?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    disconnect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    delete?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    update?: FavouritesUpdateWithWhereUniqueWithoutUserInput | FavouritesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouritesUpdateManyWithWhereWithoutUserInput | FavouritesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
  }

  export type Purchase_storyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput> | Purchase_storyCreateWithoutUserInput[] | Purchase_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutUserInput | Purchase_storyCreateOrConnectWithoutUserInput[]
    upsert?: Purchase_storyUpsertWithWhereUniqueWithoutUserInput | Purchase_storyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Purchase_storyCreateManyUserInputEnvelope
    set?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    disconnect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    delete?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    update?: Purchase_storyUpdateWithWhereUniqueWithoutUserInput | Purchase_storyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Purchase_storyUpdateManyWithWhereWithoutUserInput | Purchase_storyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
  }

  export type Visit_storyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput> | Visit_storyCreateWithoutUserInput[] | Visit_storyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutUserInput | Visit_storyCreateOrConnectWithoutUserInput[]
    upsert?: Visit_storyUpsertWithWhereUniqueWithoutUserInput | Visit_storyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Visit_storyCreateManyUserInputEnvelope
    set?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    disconnect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    delete?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    update?: Visit_storyUpdateWithWhereUniqueWithoutUserInput | Visit_storyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Visit_storyUpdateManyWithWhereWithoutUserInput | Visit_storyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFavouritesInput = {
    create?: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouritesInput
    connect?: UserWhereUniqueInput
  }

  export type GoodsCreateNestedOneWithoutFavouritesInput = {
    create?: XOR<GoodsCreateWithoutFavouritesInput, GoodsUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutFavouritesInput
    connect?: GoodsWhereUniqueInput
  }

  export type UserUpdateOneWithoutFavouritesNestedInput = {
    create?: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouritesInput
    upsert?: UserUpsertWithoutFavouritesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavouritesInput, UserUpdateWithoutFavouritesInput>, UserUncheckedUpdateWithoutFavouritesInput>
  }

  export type GoodsUpdateOneWithoutFavouritesNestedInput = {
    create?: XOR<GoodsCreateWithoutFavouritesInput, GoodsUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutFavouritesInput
    upsert?: GoodsUpsertWithoutFavouritesInput
    disconnect?: GoodsWhereInput | boolean
    delete?: GoodsWhereInput | boolean
    connect?: GoodsWhereUniqueInput
    update?: XOR<XOR<GoodsUpdateToOneWithWhereWithoutFavouritesInput, GoodsUpdateWithoutFavouritesInput>, GoodsUncheckedUpdateWithoutFavouritesInput>
  }

  export type SubCategoriesCreateNestedOneWithoutGoodsInput = {
    create?: XOR<SubCategoriesCreateWithoutGoodsInput, SubCategoriesUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutGoodsInput
    connect?: SubCategoriesWhereUniqueInput
  }

  export type FavouritesCreateNestedManyWithoutGoodsInput = {
    create?: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput> | FavouritesCreateWithoutGoodsInput[] | FavouritesUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutGoodsInput | FavouritesCreateOrConnectWithoutGoodsInput[]
    createMany?: FavouritesCreateManyGoodsInputEnvelope
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
  }

  export type Purchase_storyCreateNestedManyWithoutGoodsInput = {
    create?: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput> | Purchase_storyCreateWithoutGoodsInput[] | Purchase_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutGoodsInput | Purchase_storyCreateOrConnectWithoutGoodsInput[]
    createMany?: Purchase_storyCreateManyGoodsInputEnvelope
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
  }

  export type Visit_storyCreateNestedManyWithoutGoodsInput = {
    create?: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput> | Visit_storyCreateWithoutGoodsInput[] | Visit_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutGoodsInput | Visit_storyCreateOrConnectWithoutGoodsInput[]
    createMany?: Visit_storyCreateManyGoodsInputEnvelope
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutGoodsInput = {
    create?: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput> | FeedbackCreateWithoutGoodsInput[] | FeedbackUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGoodsInput | FeedbackCreateOrConnectWithoutGoodsInput[]
    createMany?: FeedbackCreateManyGoodsInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FavouritesUncheckedCreateNestedManyWithoutGoodsInput = {
    create?: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput> | FavouritesCreateWithoutGoodsInput[] | FavouritesUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutGoodsInput | FavouritesCreateOrConnectWithoutGoodsInput[]
    createMany?: FavouritesCreateManyGoodsInputEnvelope
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
  }

  export type Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput = {
    create?: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput> | Purchase_storyCreateWithoutGoodsInput[] | Purchase_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutGoodsInput | Purchase_storyCreateOrConnectWithoutGoodsInput[]
    createMany?: Purchase_storyCreateManyGoodsInputEnvelope
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
  }

  export type Visit_storyUncheckedCreateNestedManyWithoutGoodsInput = {
    create?: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput> | Visit_storyCreateWithoutGoodsInput[] | Visit_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutGoodsInput | Visit_storyCreateOrConnectWithoutGoodsInput[]
    createMany?: Visit_storyCreateManyGoodsInputEnvelope
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutGoodsInput = {
    create?: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput> | FeedbackCreateWithoutGoodsInput[] | FeedbackUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGoodsInput | FeedbackCreateOrConnectWithoutGoodsInput[]
    createMany?: FeedbackCreateManyGoodsInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubCategoriesUpdateOneWithoutGoodsNestedInput = {
    create?: XOR<SubCategoriesCreateWithoutGoodsInput, SubCategoriesUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: SubCategoriesCreateOrConnectWithoutGoodsInput
    upsert?: SubCategoriesUpsertWithoutGoodsInput
    disconnect?: SubCategoriesWhereInput | boolean
    delete?: SubCategoriesWhereInput | boolean
    connect?: SubCategoriesWhereUniqueInput
    update?: XOR<XOR<SubCategoriesUpdateToOneWithWhereWithoutGoodsInput, SubCategoriesUpdateWithoutGoodsInput>, SubCategoriesUncheckedUpdateWithoutGoodsInput>
  }

  export type FavouritesUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput> | FavouritesCreateWithoutGoodsInput[] | FavouritesUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutGoodsInput | FavouritesCreateOrConnectWithoutGoodsInput[]
    upsert?: FavouritesUpsertWithWhereUniqueWithoutGoodsInput | FavouritesUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: FavouritesCreateManyGoodsInputEnvelope
    set?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    disconnect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    delete?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    update?: FavouritesUpdateWithWhereUniqueWithoutGoodsInput | FavouritesUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: FavouritesUpdateManyWithWhereWithoutGoodsInput | FavouritesUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
  }

  export type Purchase_storyUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput> | Purchase_storyCreateWithoutGoodsInput[] | Purchase_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutGoodsInput | Purchase_storyCreateOrConnectWithoutGoodsInput[]
    upsert?: Purchase_storyUpsertWithWhereUniqueWithoutGoodsInput | Purchase_storyUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: Purchase_storyCreateManyGoodsInputEnvelope
    set?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    disconnect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    delete?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    update?: Purchase_storyUpdateWithWhereUniqueWithoutGoodsInput | Purchase_storyUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: Purchase_storyUpdateManyWithWhereWithoutGoodsInput | Purchase_storyUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
  }

  export type Visit_storyUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput> | Visit_storyCreateWithoutGoodsInput[] | Visit_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutGoodsInput | Visit_storyCreateOrConnectWithoutGoodsInput[]
    upsert?: Visit_storyUpsertWithWhereUniqueWithoutGoodsInput | Visit_storyUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: Visit_storyCreateManyGoodsInputEnvelope
    set?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    disconnect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    delete?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    update?: Visit_storyUpdateWithWhereUniqueWithoutGoodsInput | Visit_storyUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: Visit_storyUpdateManyWithWhereWithoutGoodsInput | Visit_storyUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput> | FeedbackCreateWithoutGoodsInput[] | FeedbackUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGoodsInput | FeedbackCreateOrConnectWithoutGoodsInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGoodsInput | FeedbackUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: FeedbackCreateManyGoodsInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGoodsInput | FeedbackUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGoodsInput | FeedbackUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FavouritesUncheckedUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput> | FavouritesCreateWithoutGoodsInput[] | FavouritesUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FavouritesCreateOrConnectWithoutGoodsInput | FavouritesCreateOrConnectWithoutGoodsInput[]
    upsert?: FavouritesUpsertWithWhereUniqueWithoutGoodsInput | FavouritesUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: FavouritesCreateManyGoodsInputEnvelope
    set?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    disconnect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    delete?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    connect?: FavouritesWhereUniqueInput | FavouritesWhereUniqueInput[]
    update?: FavouritesUpdateWithWhereUniqueWithoutGoodsInput | FavouritesUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: FavouritesUpdateManyWithWhereWithoutGoodsInput | FavouritesUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
  }

  export type Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput> | Purchase_storyCreateWithoutGoodsInput[] | Purchase_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Purchase_storyCreateOrConnectWithoutGoodsInput | Purchase_storyCreateOrConnectWithoutGoodsInput[]
    upsert?: Purchase_storyUpsertWithWhereUniqueWithoutGoodsInput | Purchase_storyUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: Purchase_storyCreateManyGoodsInputEnvelope
    set?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    disconnect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    delete?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    connect?: Purchase_storyWhereUniqueInput | Purchase_storyWhereUniqueInput[]
    update?: Purchase_storyUpdateWithWhereUniqueWithoutGoodsInput | Purchase_storyUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: Purchase_storyUpdateManyWithWhereWithoutGoodsInput | Purchase_storyUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
  }

  export type Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput> | Visit_storyCreateWithoutGoodsInput[] | Visit_storyUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: Visit_storyCreateOrConnectWithoutGoodsInput | Visit_storyCreateOrConnectWithoutGoodsInput[]
    upsert?: Visit_storyUpsertWithWhereUniqueWithoutGoodsInput | Visit_storyUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: Visit_storyCreateManyGoodsInputEnvelope
    set?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    disconnect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    delete?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    connect?: Visit_storyWhereUniqueInput | Visit_storyWhereUniqueInput[]
    update?: Visit_storyUpdateWithWhereUniqueWithoutGoodsInput | Visit_storyUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: Visit_storyUpdateManyWithWhereWithoutGoodsInput | Visit_storyUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutGoodsNestedInput = {
    create?: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput> | FeedbackCreateWithoutGoodsInput[] | FeedbackUncheckedCreateWithoutGoodsInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGoodsInput | FeedbackCreateOrConnectWithoutGoodsInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGoodsInput | FeedbackUpsertWithWhereUniqueWithoutGoodsInput[]
    createMany?: FeedbackCreateManyGoodsInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGoodsInput | FeedbackUpdateWithWhereUniqueWithoutGoodsInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGoodsInput | FeedbackUpdateManyWithWhereWithoutGoodsInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type GoodsCreateNestedOneWithoutPurchase_storyInput = {
    create?: XOR<GoodsCreateWithoutPurchase_storyInput, GoodsUncheckedCreateWithoutPurchase_storyInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutPurchase_storyInput
    connect?: GoodsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPurchase_storyInput = {
    create?: XOR<UserCreateWithoutPurchase_storyInput, UserUncheckedCreateWithoutPurchase_storyInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchase_storyInput
    connect?: UserWhereUniqueInput
  }

  export type GoodsUpdateOneWithoutPurchase_storyNestedInput = {
    create?: XOR<GoodsCreateWithoutPurchase_storyInput, GoodsUncheckedCreateWithoutPurchase_storyInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutPurchase_storyInput
    upsert?: GoodsUpsertWithoutPurchase_storyInput
    disconnect?: GoodsWhereInput | boolean
    delete?: GoodsWhereInput | boolean
    connect?: GoodsWhereUniqueInput
    update?: XOR<XOR<GoodsUpdateToOneWithWhereWithoutPurchase_storyInput, GoodsUpdateWithoutPurchase_storyInput>, GoodsUncheckedUpdateWithoutPurchase_storyInput>
  }

  export type UserUpdateOneRequiredWithoutPurchase_storyNestedInput = {
    create?: XOR<UserCreateWithoutPurchase_storyInput, UserUncheckedCreateWithoutPurchase_storyInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchase_storyInput
    upsert?: UserUpsertWithoutPurchase_storyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPurchase_storyInput, UserUpdateWithoutPurchase_storyInput>, UserUncheckedUpdateWithoutPurchase_storyInput>
  }

  export type GoodsCreateNestedOneWithoutVisit_storyInput = {
    create?: XOR<GoodsCreateWithoutVisit_storyInput, GoodsUncheckedCreateWithoutVisit_storyInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutVisit_storyInput
    connect?: GoodsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVisit_storyInput = {
    create?: XOR<UserCreateWithoutVisit_storyInput, UserUncheckedCreateWithoutVisit_storyInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisit_storyInput
    connect?: UserWhereUniqueInput
  }

  export type GoodsUpdateOneWithoutVisit_storyNestedInput = {
    create?: XOR<GoodsCreateWithoutVisit_storyInput, GoodsUncheckedCreateWithoutVisit_storyInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutVisit_storyInput
    upsert?: GoodsUpsertWithoutVisit_storyInput
    disconnect?: GoodsWhereInput | boolean
    delete?: GoodsWhereInput | boolean
    connect?: GoodsWhereUniqueInput
    update?: XOR<XOR<GoodsUpdateToOneWithWhereWithoutVisit_storyInput, GoodsUpdateWithoutVisit_storyInput>, GoodsUncheckedUpdateWithoutVisit_storyInput>
  }

  export type UserUpdateOneRequiredWithoutVisit_storyNestedInput = {
    create?: XOR<UserCreateWithoutVisit_storyInput, UserUncheckedCreateWithoutVisit_storyInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisit_storyInput
    upsert?: UserUpsertWithoutVisit_storyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVisit_storyInput, UserUpdateWithoutVisit_storyInput>, UserUncheckedUpdateWithoutVisit_storyInput>
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type GoodsCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<GoodsCreateWithoutFeedbackInput, GoodsUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutFeedbackInput
    connect?: GoodsWhereUniqueInput
  }

  export type UserUpdateOneWithoutFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackInput, UserUpdateWithoutFeedbackInput>, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type GoodsUpdateOneWithoutFeedbackNestedInput = {
    create?: XOR<GoodsCreateWithoutFeedbackInput, GoodsUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: GoodsCreateOrConnectWithoutFeedbackInput
    upsert?: GoodsUpsertWithoutFeedbackInput
    disconnect?: GoodsWhereInput | boolean
    delete?: GoodsWhereInput | boolean
    connect?: GoodsWhereUniqueInput
    update?: XOR<XOR<GoodsUpdateToOneWithWhereWithoutFeedbackInput, GoodsUpdateWithoutFeedbackInput>, GoodsUncheckedUpdateWithoutFeedbackInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SubCategoriesCreateWithoutCategoriesInput = {
    title: string
    Goods?: GoodsCreateNestedManyWithoutSubcategoriesInput
  }

  export type SubCategoriesUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title: string
    Goods?: GoodsUncheckedCreateNestedManyWithoutSubcategoriesInput
  }

  export type SubCategoriesCreateOrConnectWithoutCategoriesInput = {
    where: SubCategoriesWhereUniqueInput
    create: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput>
  }

  export type SubCategoriesCreateManyCategoriesInputEnvelope = {
    data: SubCategoriesCreateManyCategoriesInput | SubCategoriesCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type SubCategoriesUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: SubCategoriesWhereUniqueInput
    update: XOR<SubCategoriesUpdateWithoutCategoriesInput, SubCategoriesUncheckedUpdateWithoutCategoriesInput>
    create: XOR<SubCategoriesCreateWithoutCategoriesInput, SubCategoriesUncheckedCreateWithoutCategoriesInput>
  }

  export type SubCategoriesUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: SubCategoriesWhereUniqueInput
    data: XOR<SubCategoriesUpdateWithoutCategoriesInput, SubCategoriesUncheckedUpdateWithoutCategoriesInput>
  }

  export type SubCategoriesUpdateManyWithWhereWithoutCategoriesInput = {
    where: SubCategoriesScalarWhereInput
    data: XOR<SubCategoriesUpdateManyMutationInput, SubCategoriesUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type SubCategoriesScalarWhereInput = {
    AND?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
    OR?: SubCategoriesScalarWhereInput[]
    NOT?: SubCategoriesScalarWhereInput | SubCategoriesScalarWhereInput[]
    id?: IntFilter<"SubCategories"> | number
    title?: StringFilter<"SubCategories"> | string
    categoriesId?: IntNullableFilter<"SubCategories"> | number | null
  }

  export type CategoriesCreateWithoutSubcategoriesInput = {
    title: string
  }

  export type CategoriesUncheckedCreateWithoutSubcategoriesInput = {
    id?: number
    title: string
  }

  export type CategoriesCreateOrConnectWithoutSubcategoriesInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutSubcategoriesInput, CategoriesUncheckedCreateWithoutSubcategoriesInput>
  }

  export type GoodsCreateWithoutSubcategoriesInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateWithoutSubcategoriesInput = {
    id?: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsCreateOrConnectWithoutSubcategoriesInput = {
    where: GoodsWhereUniqueInput
    create: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput>
  }

  export type GoodsCreateManySubcategoriesInputEnvelope = {
    data: GoodsCreateManySubcategoriesInput | GoodsCreateManySubcategoriesInput[]
    skipDuplicates?: boolean
  }

  export type CategoriesUpsertWithoutSubcategoriesInput = {
    update: XOR<CategoriesUpdateWithoutSubcategoriesInput, CategoriesUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<CategoriesCreateWithoutSubcategoriesInput, CategoriesUncheckedCreateWithoutSubcategoriesInput>
    where?: CategoriesWhereInput
  }

  export type CategoriesUpdateToOneWithWhereWithoutSubcategoriesInput = {
    where?: CategoriesWhereInput
    data: XOR<CategoriesUpdateWithoutSubcategoriesInput, CategoriesUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type CategoriesUpdateWithoutSubcategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type GoodsUpsertWithWhereUniqueWithoutSubcategoriesInput = {
    where: GoodsWhereUniqueInput
    update: XOR<GoodsUpdateWithoutSubcategoriesInput, GoodsUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<GoodsCreateWithoutSubcategoriesInput, GoodsUncheckedCreateWithoutSubcategoriesInput>
  }

  export type GoodsUpdateWithWhereUniqueWithoutSubcategoriesInput = {
    where: GoodsWhereUniqueInput
    data: XOR<GoodsUpdateWithoutSubcategoriesInput, GoodsUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type GoodsUpdateManyWithWhereWithoutSubcategoriesInput = {
    where: GoodsScalarWhereInput
    data: XOR<GoodsUpdateManyMutationInput, GoodsUncheckedUpdateManyWithoutSubcategoriesInput>
  }

  export type GoodsScalarWhereInput = {
    AND?: GoodsScalarWhereInput | GoodsScalarWhereInput[]
    OR?: GoodsScalarWhereInput[]
    NOT?: GoodsScalarWhereInput | GoodsScalarWhereInput[]
    id?: IntFilter<"Goods"> | number
    subcategory_id?: IntFilter<"Goods"> | number
    title?: StringFilter<"Goods"> | string
    price?: IntFilter<"Goods"> | number
    width?: FloatFilter<"Goods"> | number
    height?: FloatFilter<"Goods"> | number
    length?: FloatFilter<"Goods"> | number
    color?: StringFilter<"Goods"> | string
    manufacter?: StringFilter<"Goods"> | string
  }

  export type FavouritesCreateWithoutUserInput = {
    Goods?: GoodsCreateNestedOneWithoutFavouritesInput
  }

  export type FavouritesUncheckedCreateWithoutUserInput = {
    id?: number
    good_id: number
  }

  export type FavouritesCreateOrConnectWithoutUserInput = {
    where: FavouritesWhereUniqueInput
    create: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput>
  }

  export type FavouritesCreateManyUserInputEnvelope = {
    data: FavouritesCreateManyUserInput | FavouritesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Purchase_storyCreateWithoutUserInput = {
    quantity: number
    price: number
    Goods?: GoodsCreateNestedOneWithoutPurchase_storyInput
  }

  export type Purchase_storyUncheckedCreateWithoutUserInput = {
    id?: number
    good_id: number
    quantity: number
    price: number
  }

  export type Purchase_storyCreateOrConnectWithoutUserInput = {
    where: Purchase_storyWhereUniqueInput
    create: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput>
  }

  export type Purchase_storyCreateManyUserInputEnvelope = {
    data: Purchase_storyCreateManyUserInput | Purchase_storyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Visit_storyCreateWithoutUserInput = {
    Goods?: GoodsCreateNestedOneWithoutVisit_storyInput
  }

  export type Visit_storyUncheckedCreateWithoutUserInput = {
    id?: number
    good_id: number
  }

  export type Visit_storyCreateOrConnectWithoutUserInput = {
    where: Visit_storyWhereUniqueInput
    create: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput>
  }

  export type Visit_storyCreateManyUserInputEnvelope = {
    data: Visit_storyCreateManyUserInput | Visit_storyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    star_rate: number
    content: string
    Goods?: GoodsCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    good_id: number
    star_rate: number
    content: string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavouritesUpsertWithWhereUniqueWithoutUserInput = {
    where: FavouritesWhereUniqueInput
    update: XOR<FavouritesUpdateWithoutUserInput, FavouritesUncheckedUpdateWithoutUserInput>
    create: XOR<FavouritesCreateWithoutUserInput, FavouritesUncheckedCreateWithoutUserInput>
  }

  export type FavouritesUpdateWithWhereUniqueWithoutUserInput = {
    where: FavouritesWhereUniqueInput
    data: XOR<FavouritesUpdateWithoutUserInput, FavouritesUncheckedUpdateWithoutUserInput>
  }

  export type FavouritesUpdateManyWithWhereWithoutUserInput = {
    where: FavouritesScalarWhereInput
    data: XOR<FavouritesUpdateManyMutationInput, FavouritesUncheckedUpdateManyWithoutUserInput>
  }

  export type FavouritesScalarWhereInput = {
    AND?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
    OR?: FavouritesScalarWhereInput[]
    NOT?: FavouritesScalarWhereInput | FavouritesScalarWhereInput[]
    id?: IntFilter<"Favourites"> | number
    userId?: IntNullableFilter<"Favourites"> | number | null
    good_id?: IntFilter<"Favourites"> | number
  }

  export type Purchase_storyUpsertWithWhereUniqueWithoutUserInput = {
    where: Purchase_storyWhereUniqueInput
    update: XOR<Purchase_storyUpdateWithoutUserInput, Purchase_storyUncheckedUpdateWithoutUserInput>
    create: XOR<Purchase_storyCreateWithoutUserInput, Purchase_storyUncheckedCreateWithoutUserInput>
  }

  export type Purchase_storyUpdateWithWhereUniqueWithoutUserInput = {
    where: Purchase_storyWhereUniqueInput
    data: XOR<Purchase_storyUpdateWithoutUserInput, Purchase_storyUncheckedUpdateWithoutUserInput>
  }

  export type Purchase_storyUpdateManyWithWhereWithoutUserInput = {
    where: Purchase_storyScalarWhereInput
    data: XOR<Purchase_storyUpdateManyMutationInput, Purchase_storyUncheckedUpdateManyWithoutUserInput>
  }

  export type Purchase_storyScalarWhereInput = {
    AND?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
    OR?: Purchase_storyScalarWhereInput[]
    NOT?: Purchase_storyScalarWhereInput | Purchase_storyScalarWhereInput[]
    id?: IntFilter<"Purchase_story"> | number
    good_id?: IntFilter<"Purchase_story"> | number
    user_id?: IntFilter<"Purchase_story"> | number
    quantity?: IntFilter<"Purchase_story"> | number
    price?: IntFilter<"Purchase_story"> | number
  }

  export type Visit_storyUpsertWithWhereUniqueWithoutUserInput = {
    where: Visit_storyWhereUniqueInput
    update: XOR<Visit_storyUpdateWithoutUserInput, Visit_storyUncheckedUpdateWithoutUserInput>
    create: XOR<Visit_storyCreateWithoutUserInput, Visit_storyUncheckedCreateWithoutUserInput>
  }

  export type Visit_storyUpdateWithWhereUniqueWithoutUserInput = {
    where: Visit_storyWhereUniqueInput
    data: XOR<Visit_storyUpdateWithoutUserInput, Visit_storyUncheckedUpdateWithoutUserInput>
  }

  export type Visit_storyUpdateManyWithWhereWithoutUserInput = {
    where: Visit_storyScalarWhereInput
    data: XOR<Visit_storyUpdateManyMutationInput, Visit_storyUncheckedUpdateManyWithoutUserInput>
  }

  export type Visit_storyScalarWhereInput = {
    AND?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
    OR?: Visit_storyScalarWhereInput[]
    NOT?: Visit_storyScalarWhereInput | Visit_storyScalarWhereInput[]
    id?: IntFilter<"Visit_story"> | number
    good_id?: IntFilter<"Visit_story"> | number
    user_id?: IntFilter<"Visit_story"> | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    user_id?: IntFilter<"Feedback"> | number
    good_id?: IntFilter<"Feedback"> | number
    star_rate?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
  }

  export type UserCreateWithoutFavouritesInput = {
    login: string
    password: string
    name: string
    phone_number: string
    Purchase_story?: Purchase_storyCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavouritesInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavouritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
  }

  export type GoodsCreateWithoutFavouritesInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Subcategories?: SubCategoriesCreateNestedOneWithoutGoodsInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateWithoutFavouritesInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsCreateOrConnectWithoutFavouritesInput = {
    where: GoodsWhereUniqueInput
    create: XOR<GoodsCreateWithoutFavouritesInput, GoodsUncheckedCreateWithoutFavouritesInput>
  }

  export type UserUpsertWithoutFavouritesInput = {
    update: XOR<UserUpdateWithoutFavouritesInput, UserUncheckedUpdateWithoutFavouritesInput>
    create: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavouritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavouritesInput, UserUncheckedUpdateWithoutFavouritesInput>
  }

  export type UserUpdateWithoutFavouritesInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Purchase_story?: Purchase_storyUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavouritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoodsUpsertWithoutFavouritesInput = {
    update: XOR<GoodsUpdateWithoutFavouritesInput, GoodsUncheckedUpdateWithoutFavouritesInput>
    create: XOR<GoodsCreateWithoutFavouritesInput, GoodsUncheckedCreateWithoutFavouritesInput>
    where?: GoodsWhereInput
  }

  export type GoodsUpdateToOneWithWhereWithoutFavouritesInput = {
    where?: GoodsWhereInput
    data: XOR<GoodsUpdateWithoutFavouritesInput, GoodsUncheckedUpdateWithoutFavouritesInput>
  }

  export type GoodsUpdateWithoutFavouritesInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Subcategories?: SubCategoriesUpdateOneWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateWithoutFavouritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type SubCategoriesCreateWithoutGoodsInput = {
    title: string
    Categories?: CategoriesCreateNestedOneWithoutSubcategoriesInput
  }

  export type SubCategoriesUncheckedCreateWithoutGoodsInput = {
    id?: number
    title: string
    categoriesId?: number | null
  }

  export type SubCategoriesCreateOrConnectWithoutGoodsInput = {
    where: SubCategoriesWhereUniqueInput
    create: XOR<SubCategoriesCreateWithoutGoodsInput, SubCategoriesUncheckedCreateWithoutGoodsInput>
  }

  export type FavouritesCreateWithoutGoodsInput = {
    User?: UserCreateNestedOneWithoutFavouritesInput
  }

  export type FavouritesUncheckedCreateWithoutGoodsInput = {
    id?: number
    userId?: number | null
  }

  export type FavouritesCreateOrConnectWithoutGoodsInput = {
    where: FavouritesWhereUniqueInput
    create: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput>
  }

  export type FavouritesCreateManyGoodsInputEnvelope = {
    data: FavouritesCreateManyGoodsInput | FavouritesCreateManyGoodsInput[]
    skipDuplicates?: boolean
  }

  export type Purchase_storyCreateWithoutGoodsInput = {
    quantity: number
    price: number
    User: UserCreateNestedOneWithoutPurchase_storyInput
  }

  export type Purchase_storyUncheckedCreateWithoutGoodsInput = {
    id?: number
    user_id: number
    quantity: number
    price: number
  }

  export type Purchase_storyCreateOrConnectWithoutGoodsInput = {
    where: Purchase_storyWhereUniqueInput
    create: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput>
  }

  export type Purchase_storyCreateManyGoodsInputEnvelope = {
    data: Purchase_storyCreateManyGoodsInput | Purchase_storyCreateManyGoodsInput[]
    skipDuplicates?: boolean
  }

  export type Visit_storyCreateWithoutGoodsInput = {
    User: UserCreateNestedOneWithoutVisit_storyInput
  }

  export type Visit_storyUncheckedCreateWithoutGoodsInput = {
    id?: number
    user_id: number
  }

  export type Visit_storyCreateOrConnectWithoutGoodsInput = {
    where: Visit_storyWhereUniqueInput
    create: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput>
  }

  export type Visit_storyCreateManyGoodsInputEnvelope = {
    data: Visit_storyCreateManyGoodsInput | Visit_storyCreateManyGoodsInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutGoodsInput = {
    star_rate: number
    content: string
    User?: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutGoodsInput = {
    id?: number
    user_id: number
    star_rate: number
    content: string
  }

  export type FeedbackCreateOrConnectWithoutGoodsInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput>
  }

  export type FeedbackCreateManyGoodsInputEnvelope = {
    data: FeedbackCreateManyGoodsInput | FeedbackCreateManyGoodsInput[]
    skipDuplicates?: boolean
  }

  export type SubCategoriesUpsertWithoutGoodsInput = {
    update: XOR<SubCategoriesUpdateWithoutGoodsInput, SubCategoriesUncheckedUpdateWithoutGoodsInput>
    create: XOR<SubCategoriesCreateWithoutGoodsInput, SubCategoriesUncheckedCreateWithoutGoodsInput>
    where?: SubCategoriesWhereInput
  }

  export type SubCategoriesUpdateToOneWithWhereWithoutGoodsInput = {
    where?: SubCategoriesWhereInput
    data: XOR<SubCategoriesUpdateWithoutGoodsInput, SubCategoriesUncheckedUpdateWithoutGoodsInput>
  }

  export type SubCategoriesUpdateWithoutGoodsInput = {
    title?: StringFieldUpdateOperationsInput | string
    Categories?: CategoriesUpdateOneWithoutSubcategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    categoriesId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FavouritesUpsertWithWhereUniqueWithoutGoodsInput = {
    where: FavouritesWhereUniqueInput
    update: XOR<FavouritesUpdateWithoutGoodsInput, FavouritesUncheckedUpdateWithoutGoodsInput>
    create: XOR<FavouritesCreateWithoutGoodsInput, FavouritesUncheckedCreateWithoutGoodsInput>
  }

  export type FavouritesUpdateWithWhereUniqueWithoutGoodsInput = {
    where: FavouritesWhereUniqueInput
    data: XOR<FavouritesUpdateWithoutGoodsInput, FavouritesUncheckedUpdateWithoutGoodsInput>
  }

  export type FavouritesUpdateManyWithWhereWithoutGoodsInput = {
    where: FavouritesScalarWhereInput
    data: XOR<FavouritesUpdateManyMutationInput, FavouritesUncheckedUpdateManyWithoutGoodsInput>
  }

  export type Purchase_storyUpsertWithWhereUniqueWithoutGoodsInput = {
    where: Purchase_storyWhereUniqueInput
    update: XOR<Purchase_storyUpdateWithoutGoodsInput, Purchase_storyUncheckedUpdateWithoutGoodsInput>
    create: XOR<Purchase_storyCreateWithoutGoodsInput, Purchase_storyUncheckedCreateWithoutGoodsInput>
  }

  export type Purchase_storyUpdateWithWhereUniqueWithoutGoodsInput = {
    where: Purchase_storyWhereUniqueInput
    data: XOR<Purchase_storyUpdateWithoutGoodsInput, Purchase_storyUncheckedUpdateWithoutGoodsInput>
  }

  export type Purchase_storyUpdateManyWithWhereWithoutGoodsInput = {
    where: Purchase_storyScalarWhereInput
    data: XOR<Purchase_storyUpdateManyMutationInput, Purchase_storyUncheckedUpdateManyWithoutGoodsInput>
  }

  export type Visit_storyUpsertWithWhereUniqueWithoutGoodsInput = {
    where: Visit_storyWhereUniqueInput
    update: XOR<Visit_storyUpdateWithoutGoodsInput, Visit_storyUncheckedUpdateWithoutGoodsInput>
    create: XOR<Visit_storyCreateWithoutGoodsInput, Visit_storyUncheckedCreateWithoutGoodsInput>
  }

  export type Visit_storyUpdateWithWhereUniqueWithoutGoodsInput = {
    where: Visit_storyWhereUniqueInput
    data: XOR<Visit_storyUpdateWithoutGoodsInput, Visit_storyUncheckedUpdateWithoutGoodsInput>
  }

  export type Visit_storyUpdateManyWithWhereWithoutGoodsInput = {
    where: Visit_storyScalarWhereInput
    data: XOR<Visit_storyUpdateManyMutationInput, Visit_storyUncheckedUpdateManyWithoutGoodsInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutGoodsInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutGoodsInput, FeedbackUncheckedUpdateWithoutGoodsInput>
    create: XOR<FeedbackCreateWithoutGoodsInput, FeedbackUncheckedCreateWithoutGoodsInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutGoodsInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutGoodsInput, FeedbackUncheckedUpdateWithoutGoodsInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutGoodsInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutGoodsInput>
  }

  export type GoodsCreateWithoutPurchase_storyInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Subcategories?: SubCategoriesCreateNestedOneWithoutGoodsInput
    Favourites?: FavouritesCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateWithoutPurchase_storyInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsCreateOrConnectWithoutPurchase_storyInput = {
    where: GoodsWhereUniqueInput
    create: XOR<GoodsCreateWithoutPurchase_storyInput, GoodsUncheckedCreateWithoutPurchase_storyInput>
  }

  export type UserCreateWithoutPurchase_storyInput = {
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchase_storyInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchase_storyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchase_storyInput, UserUncheckedCreateWithoutPurchase_storyInput>
  }

  export type GoodsUpsertWithoutPurchase_storyInput = {
    update: XOR<GoodsUpdateWithoutPurchase_storyInput, GoodsUncheckedUpdateWithoutPurchase_storyInput>
    create: XOR<GoodsCreateWithoutPurchase_storyInput, GoodsUncheckedCreateWithoutPurchase_storyInput>
    where?: GoodsWhereInput
  }

  export type GoodsUpdateToOneWithWhereWithoutPurchase_storyInput = {
    where?: GoodsWhereInput
    data: XOR<GoodsUpdateWithoutPurchase_storyInput, GoodsUncheckedUpdateWithoutPurchase_storyInput>
  }

  export type GoodsUpdateWithoutPurchase_storyInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Subcategories?: SubCategoriesUpdateOneWithoutGoodsNestedInput
    Favourites?: FavouritesUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateWithoutPurchase_storyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type UserUpsertWithoutPurchase_storyInput = {
    update: XOR<UserUpdateWithoutPurchase_storyInput, UserUncheckedUpdateWithoutPurchase_storyInput>
    create: XOR<UserCreateWithoutPurchase_storyInput, UserUncheckedCreateWithoutPurchase_storyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPurchase_storyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPurchase_storyInput, UserUncheckedUpdateWithoutPurchase_storyInput>
  }

  export type UserUpdateWithoutPurchase_storyInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchase_storyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoodsCreateWithoutVisit_storyInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Subcategories?: SubCategoriesCreateNestedOneWithoutGoodsInput
    Favourites?: FavouritesCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateWithoutVisit_storyInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsCreateOrConnectWithoutVisit_storyInput = {
    where: GoodsWhereUniqueInput
    create: XOR<GoodsCreateWithoutVisit_storyInput, GoodsUncheckedCreateWithoutVisit_storyInput>
  }

  export type UserCreateWithoutVisit_storyInput = {
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVisit_storyInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVisit_storyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVisit_storyInput, UserUncheckedCreateWithoutVisit_storyInput>
  }

  export type GoodsUpsertWithoutVisit_storyInput = {
    update: XOR<GoodsUpdateWithoutVisit_storyInput, GoodsUncheckedUpdateWithoutVisit_storyInput>
    create: XOR<GoodsCreateWithoutVisit_storyInput, GoodsUncheckedCreateWithoutVisit_storyInput>
    where?: GoodsWhereInput
  }

  export type GoodsUpdateToOneWithWhereWithoutVisit_storyInput = {
    where?: GoodsWhereInput
    data: XOR<GoodsUpdateWithoutVisit_storyInput, GoodsUncheckedUpdateWithoutVisit_storyInput>
  }

  export type GoodsUpdateWithoutVisit_storyInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Subcategories?: SubCategoriesUpdateOneWithoutGoodsNestedInput
    Favourites?: FavouritesUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateWithoutVisit_storyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type UserUpsertWithoutVisit_storyInput = {
    update: XOR<UserUpdateWithoutVisit_storyInput, UserUncheckedUpdateWithoutVisit_storyInput>
    create: XOR<UserCreateWithoutVisit_storyInput, UserUncheckedCreateWithoutVisit_storyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVisit_storyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVisit_storyInput, UserUncheckedUpdateWithoutVisit_storyInput>
  }

  export type UserUpdateWithoutVisit_storyInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVisit_storyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutUserNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFeedbackInput = {
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    id?: number
    login: string
    password: string
    name: string
    phone_number: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutUserInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutUserInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type GoodsCreateWithoutFeedbackInput = {
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Subcategories?: SubCategoriesCreateNestedOneWithoutGoodsInput
    Favourites?: FavouritesCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyCreateNestedManyWithoutGoodsInput
  }

  export type GoodsUncheckedCreateWithoutFeedbackInput = {
    id?: number
    subcategory_id: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
    Favourites?: FavouritesUncheckedCreateNestedManyWithoutGoodsInput
    Purchase_story?: Purchase_storyUncheckedCreateNestedManyWithoutGoodsInput
    Visit_story?: Visit_storyUncheckedCreateNestedManyWithoutGoodsInput
  }

  export type GoodsCreateOrConnectWithoutFeedbackInput = {
    where: GoodsWhereUniqueInput
    create: XOR<GoodsCreateWithoutFeedbackInput, GoodsUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutUserNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutUserNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoodsUpsertWithoutFeedbackInput = {
    update: XOR<GoodsUpdateWithoutFeedbackInput, GoodsUncheckedUpdateWithoutFeedbackInput>
    create: XOR<GoodsCreateWithoutFeedbackInput, GoodsUncheckedCreateWithoutFeedbackInput>
    where?: GoodsWhereInput
  }

  export type GoodsUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: GoodsWhereInput
    data: XOR<GoodsUpdateWithoutFeedbackInput, GoodsUncheckedUpdateWithoutFeedbackInput>
  }

  export type GoodsUpdateWithoutFeedbackInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Subcategories?: SubCategoriesUpdateOneWithoutGoodsNestedInput
    Favourites?: FavouritesUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    subcategory_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type SubCategoriesCreateManyCategoriesInput = {
    id?: number
    title: string
  }

  export type SubCategoriesUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    Goods?: GoodsUpdateManyWithoutSubcategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Goods?: GoodsUncheckedUpdateManyWithoutSubcategoriesNestedInput
  }

  export type SubCategoriesUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type GoodsCreateManySubcategoriesInput = {
    id?: number
    title: string
    price: number
    width: number
    height: number
    length: number
    color: string
    manufacter: string
  }

  export type GoodsUpdateWithoutSubcategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
    Favourites?: FavouritesUncheckedUpdateManyWithoutGoodsNestedInput
    Purchase_story?: Purchase_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Visit_story?: Visit_storyUncheckedUpdateManyWithoutGoodsNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutGoodsNestedInput
  }

  export type GoodsUncheckedUpdateManyWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    manufacter?: StringFieldUpdateOperationsInput | string
  }

  export type FavouritesCreateManyUserInput = {
    id?: number
    good_id: number
  }

  export type Purchase_storyCreateManyUserInput = {
    id?: number
    good_id: number
    quantity: number
    price: number
  }

  export type Visit_storyCreateManyUserInput = {
    id?: number
    good_id: number
  }

  export type FeedbackCreateManyUserInput = {
    id?: number
    good_id: number
    star_rate: number
    content: string
  }

  export type FavouritesUpdateWithoutUserInput = {
    Goods?: GoodsUpdateOneWithoutFavouritesNestedInput
  }

  export type FavouritesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavouritesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type Purchase_storyUpdateWithoutUserInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    Goods?: GoodsUpdateOneWithoutPurchase_storyNestedInput
  }

  export type Purchase_storyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Purchase_storyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyUpdateWithoutUserInput = {
    Goods?: GoodsUpdateOneWithoutVisit_storyNestedInput
  }

  export type Visit_storyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutUserInput = {
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    Goods?: GoodsUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    good_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FavouritesCreateManyGoodsInput = {
    id?: number
    userId?: number | null
  }

  export type Purchase_storyCreateManyGoodsInput = {
    id?: number
    user_id: number
    quantity: number
    price: number
  }

  export type Visit_storyCreateManyGoodsInput = {
    id?: number
    user_id: number
  }

  export type FeedbackCreateManyGoodsInput = {
    id?: number
    user_id: number
    star_rate: number
    content: string
  }

  export type FavouritesUpdateWithoutGoodsInput = {
    User?: UserUpdateOneWithoutFavouritesNestedInput
  }

  export type FavouritesUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FavouritesUncheckedUpdateManyWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Purchase_storyUpdateWithoutGoodsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutPurchase_storyNestedInput
  }

  export type Purchase_storyUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Purchase_storyUncheckedUpdateManyWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyUpdateWithoutGoodsInput = {
    User?: UserUpdateOneRequiredWithoutVisit_storyNestedInput
  }

  export type Visit_storyUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Visit_storyUncheckedUpdateManyWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutGoodsInput = {
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    star_rate?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubCategoriesCountOutputTypeDefaultArgs instead
     */
    export type SubCategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SubCategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoodsCountOutputTypeDefaultArgs instead
     */
    export type GoodsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GoodsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesDefaultArgs instead
     */
    export type CategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubCategoriesDefaultArgs instead
     */
    export type SubCategoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SubCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavouritesDefaultArgs instead
     */
    export type FavouritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FavouritesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoodsDefaultArgs instead
     */
    export type GoodsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GoodsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Purchase_storyDefaultArgs instead
     */
    export type Purchase_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Purchase_storyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Visit_storyDefaultArgs instead
     */
    export type Visit_storyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Visit_storyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}